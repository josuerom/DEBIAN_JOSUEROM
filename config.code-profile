{"name":"config","settings":"{\"settings\":\"{ // @author: josuerom\\n  \\\"files.autoSave\\\": \\\"onFocusChange\\\",\\n  \\\"diffEditor.wordWrap\\\": \\\"on\\\",\\n  \\\"debug.terminal.clearBeforeReusing\\\": true,\\n  \\\"extensions.ignoreRecommendations\\\": true,\\n  \\\"security.Workspace.trust.untrustedFiles\\\": \\\"open\\\",\\n  \\\"explorer.confirmDelete\\\": false,\\n  \\\"redhat.telemetry.enabled\\\": false,\\n\\n  \\\"window.commandCenter\\\": true,\\n  \\\"window.menuBarVisibility\\\": \\\"compact\\\",\\n  \\\"window.zoomLevel\\\": 1,\\n  \\\"[java]\\\": {\\n    \\\"editor.formatOnSave\\\": true,\\n    \\\"editor.formatOnPaste\\\": true,\\n    \\\"editor.defaultFormatter\\\": \\\"redhat.java\\\"\\n  },\\n  \\\"terminal.integrated.defaultProfile.linux\\\": \\\"bash\\\",\\n  \\\"terminal.integrated.fontFamily\\\": \\\"JetBrains Mono\\\",\\n  \\\"terminal.integrated.fontSize\\\": 14.2,\\n  \\\"terminal.integrated.tabs.focusMode\\\": \\\"singleClick\\\",\\n  \\\"terminal.integrated.enableMultiLinePasteWarning\\\": false,\\n  \\\"terminal.integrated.cursorBlinking\\\": true,\\n  \\\"terminal.integrated.cursorStyle\\\": \\\"line\\\",\\n  \\\"terminal.integrated.gpuAcceleration\\\": \\\"off\\\",\\n  \\\"code-runner.runInTerminal\\\": true,\\n  \\\"code-runner.saveFileBeforeRun\\\": true,\\n  \\\"code-runner.showExecutionMessage\\\": false,\\n  \\\"code-runner.showRunCommandInEditorContextMenu\\\": false,\\n  \\\"code-runner.clearPreviousOutput\\\": true,\\n  \\\"code-runner.preserveFocus\\\": false,\\n  \\\"code-runner.cwd\\\": \\\"/home/josuerom/Workspace/bin\\\",\\n  \\\"code-runner.executorMap\\\": {\\n    // BUILD & RUN PROGRAM CODEFORCES C++17 INPUT MANUAL\\n    \\\"cpp\\\": \\\"clear && cd $dir && g++ $fileName -o ~/Workspace/bin/sol -std=c++17 -Wall -Wno-sign-conversion -DLOCAL && ~/Workspace/bin/sol\\\",\\n    // BUILD & RUN PROGRAM CODEFORCES C++17 FROM INPUT FILE\\n    // \\\"cpp\\\": \\\"clear && cd $dir && g++ $fileName -o ~/Workspace/bin/sol -std=c++17 -Wall -Wno-sign-conversion -DLOCAL && ~/Workspace/bin/sol < samples/in1\\\",\\n    // BUILD & RUN PROGRAM C++20 OFF CONSOLE & RESULT IN FILE OUTPUT\\n    // \\\"cpp\\\": \\\"clear && cd $dir && g++ $fileName -o ~/Workspace/bin/sol -std=c++20 -Wall -Wno-sign-conversion -DLOCAL && ~/Workspace/bin/sol < samples/in1 > samples/output\\\",\\n    // RPC C++11 FROM INPUT FILE\\n    // \\\"cpp\\\": \\\"clear && cd $dir && g++ $fileName -o $fileNameWithoutExt -std=c++11 -O2 -Wall -Wno-sign-conversion -DLOCAL && $fileNameWithoutExt < in1\\\",\\n    // REPEAT EXECUTE WITH MANUAL INPUT\\n    \\\"run_cpp\\\": \\\"clear && ~/Workspace/bin/sol\\\",\\n\\n    // BUILD & RUN JAVA > 8 INPUT MANUAL\\n    \\\"java\\\": \\\"clear && cd $dir && java $fileName\\\",\\n    // BUILD & RUN FOR JAVA = 8\\n    // \\\"java\\\": \\\"clear && cd $dir && javac -d ~/Workspace/bin $fileName && java -cp ~/Workspace/bin $fileNameWithoutExt\\\",\\n    // REPEAT EXECUTE FILE .class\\n    // \\\"java\\\": \\\"clear && java -cp ~/Workspace/bin $fileNameWithoutExt\\\",\\n\\n    \\\"python\\\": \\\"clear && cd $dir && python3 -OO -S -B $fileName\\\",\\n    \\\"javascript\\\": \\\"clear && cd $dir && node $fileName\\\",\\n    \\\"typescript\\\": \\\"clear && cd $dir && node $fileName\\\",\\n  },\\n  \\\"workbench.startupEditor\\\": \\\"none\\\",\\n  \\\"workbench.sideBar.location\\\": \\\"right\\\",\\n  \\\"workbench.statusBar.visible\\\": true,\\n  \\\"workbench.layoutControl.enabled\\\": false,\\n  \\\"workbench.editor.enablePreview\\\": false,\\n  \\\"workbench.editor.showTabs\\\": \\\"single\\\",\\n  \\\"editor.fontFamily\\\": \\\"JetBrains Mono\\\",\\n  \\\"editor.fontSize\\\": 14,\\n  \\\"editor.fontLigatures\\\": true,\\n  \\\"editor.tabCompletion\\\": \\\"on\\\",\\n  \\\"editor.tabSize\\\": 3,\\n  \\\"editor.padding.bottom\\\": 0,\\n  \\\"editor.suggestSelection\\\": \\\"first\\\",\\n  \\\"editor.wordWrap\\\": \\\"on\\\",\\n  \\\"editor.minimap.enabled\\\": false,\\n  \\\"editor.overviewRulerBorder\\\": false,\\n  \\\"editor.hideCursorInOverviewRuler\\\": true,\\n  \\\"editor.stickyScroll.enabled\\\": true,\\n  \\\"editor.renderWhitespace\\\": \\\"none\\\",\\n  \\\"editor.renderControlCharacters\\\": false,\\n  \\\"editor.cursorBlinking\\\": \\\"expand\\\",\\n  \\\"editor.inlineSuggest.enabled\\\": true,\\n  \\\"editor.unicodeHighlight.invisibleCharacters\\\": false,\\n  \\\"editor.cursorSmoothCaretAnimation\\\": \\\"on\\\",\\n  \\\"editor.linkedEditing\\\": true,\\n  \\\"editor.guides.bracketPairs\\\": true,\\n  \\\"editor.matchBrackets\\\": \\\"never\\\",\\n  \\\"editor.glyphMargin\\\": false,\\n  \\\"editor.accessibilitySupport\\\": \\\"off\\\",\\n  \\\"editor.hover.sticky\\\": false,\\n  \\\"git.enableSmartCommit\\\": true,\\n  \\\"git.autofetch\\\": true,\\n  \\\"git.confirmSync\\\": false,\\n  \\\"git.openRepositoryInParentFolders\\\": \\\"never\\\",\\n  \\\"update.showReleaseNotes\\\": false,\\n  \\\"notebook.formatOnSave.enabled\\\": true,\\n  \\\"workbench.editor.labelFormat\\\": \\\"short\\\",\\n  \\\"cph.general.menuChoices\\\": \\\"cpp java python\\\",\\n  \\\"cph.general.saveLocation\\\": \\\"/home/josuerom/Workspace/bin\\\",\\n  \\\"cph.language.cpp.Args\\\": \\\"-std=c++17 -DONLINE_JUDGE\\\",\\n  \\\"cph.language.python.Args\\\": \\\"-OO -S -B\\\",\\n  \\\"cph.language.cpp.SubmissionCompiler\\\": \\\"GNU G++17 9.2.0 (64 bit, msys 2)\\\",\\n  \\\"cph.language.java.SubmissionCompiler\\\": \\\"Java 1.8.0_241\\\",\\n  \\\"cph.general.timeOut\\\": 1000,\\n  \\\"cph.general.autoShowJudge\\\": false,\\n  \\\"trailing-spaces.trimOnSave\\\": true,\\n  \\\"symbols.hidesExplorerArrows\\\": false,\\n  \\\"workbench.iconTheme\\\": \\\"symbols\\\",\\n  \\\"workbench.productIconTheme\\\": \\\"fluent-icons\\\",\\n  \\\"editor.rulers\\\": [90]\\n}\"}","keybindings":"{\"keybindings\":\"[ // @author josuerom\\n  {\\n    \\\"command\\\": \\\"workbench.action.toggleSidebarVisibility\\\",\\n    \\\"key\\\": \\\"shift shift\\\",\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+b\\\",\\n    \\\"command\\\": \\\"-workbench.action.toggleSidebarVisibility\\\",\\n  },\\n  {\\n    \\\"key\\\": \\\"n\\\",\\n    \\\"command\\\": \\\"explorer.newFile\\\",\\n    \\\"when\\\": \\\"explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+alt+d\\\",\\n    \\\"command\\\": \\\"-cph.judgeView.focus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+alt+m\\\",\\n    \\\"command\\\": \\\"code-runner.runByLanguage\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+alt+j\\\",\\n    \\\"command\\\": \\\"-code-runner.runByLanguage\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+alt+m\\\",\\n    \\\"command\\\": \\\"-code-runner.stop\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+alt+c\\\",\\n    \\\"command\\\": \\\"code-runner.stop\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+alt+k\\\",\\n    \\\"command\\\": \\\"-code-runner.runCustomCommand\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+z\\\",\\n    \\\"command\\\": \\\"cph.judgeView.focus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+[Comma]\\\",\\n    \\\"command\\\": \\\"workbench.action.openApplicationSettingsJson\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+[Semicolon]\\\",\\n    \\\"command\\\": \\\"workbench.action.createTerminalEditorSide\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+[Semicolon]\\\",\\n    \\\"command\\\": \\\"workbench.action.terminal.toggleTerminal\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+[\\\",\\n    \\\"command\\\": \\\"-editor.action.outdentLines\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+[\\\",\\n    \\\"command\\\": \\\"editor.action.blockComment\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+a\\\",\\n    \\\"command\\\": \\\"-editor.action.blockComment\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+]\\\",\\n    \\\"command\\\": \\\"editor.action.commentLine\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+7\\\",\\n    \\\"command\\\": \\\"-editor.action.commentLine\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"shift+alt+down\\\",\\n    \\\"command\\\": \\\"-editor.action.insertCursorBelow\\\",\\n    \\\"when\\\": \\\"editorTextFocus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"shift+alt+down\\\",\\n    \\\"command\\\": \\\"-notebook.cell.copyDown\\\",\\n    \\\"when\\\": \\\"notebookEditorFocused && !inputFocus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"shift+alt+up\\\",\\n    \\\"command\\\": \\\"-editor.action.insertCursorAbove\\\",\\n    \\\"when\\\": \\\"editorTextFocus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"shift+alt+up\\\",\\n    \\\"command\\\": \\\"-notebook.cell.copyUp\\\",\\n    \\\"when\\\": \\\"notebookEditorFocused && !inputFocus\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"shift+alt+up\\\",\\n    \\\"command\\\": \\\"editor.action.copyLinesUpAction\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+alt+up\\\",\\n    \\\"command\\\": \\\"-editor.action.copyLinesUpAction\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"shift+alt+down\\\",\\n    \\\"command\\\": \\\"editor.action.copyLinesDownAction\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"ctrl+shift+alt+down\\\",\\n    \\\"command\\\": \\\"-editor.action.copyLinesDownAction\\\",\\n    \\\"when\\\": \\\"editorTextFocus && !editorReadonly\\\"\\n  },\\n]\",\"platform\":2}","snippets":"{\"snippets\":{\"cpp.json\":\"{ // @author josuerom\\n  \\\"#ifndef ONLINE_JUDGE\\\": {\\n    \\\"prefix\\\": \\\"online\\\",\\n    \\\"body\\\": [\\n      \\\"#ifndef ONLINE_JUDGE\\\",\\n      \\\"\\\\tfreopen(\\\\\\\"samples/
in1\\\\\\\", \\\\\\\"r\\\\\\\", stdin);\\\",\\n      \\\"\\\\tfreopen(\\\\\\\"samples/out\\\\\\\", \\\\\\\"w\\\\\\\", stdout);\\\",\\n      \\\"#endif\\\"\\n    ]\\n  },\\n  \\\"ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\\\": {\\n    \\\"prefix\\\": \\\"ios\\\",\\n    \\\"body\\\": [\\n      \\\"ios::sync_with_stdio(false);\\\",\\n      \\\"cin.tie(0); cout.tie(0);\\\"\\n    ]\\n  },\\n  \\\"using namespace std;\\\": {\\n    \\\"prefix\\\": \\\"usin\\\",\\n    \\\"body\\\": [\\n      \\\"using namespace std;$1\\\"\\n    ]\\n  },\\n  \\\"read char[] with space\\\": {\\n    \\\"prefix\\\": \\\"rac\\\",\\n    \\\"body\\\": [\\n      \\\"cin.getline(s$1, n$2, '\\\\\\\\n');\\\"\\n    ]\\n  },\\n  \\\"read string with space\\\": {\\n    \\\"prefix\\\": \\\"rln\\\",\\n    \\\"body\\\": [\\n      \\\"getline(cin, s$1);\\\"\\n    ]\\n  },\\n  \\\"for (int i = 0; i < n; i++)\\\": {\\n    \\\"prefix\\\": \\\"fori\\\",\\n    \\\"body\\\": [\\n      \\\"for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++)$3\\\"\\n    ]\\n  },\\n  \\\"for (int i = n; i >= 0; i--)\\\": {\\n    \\\"prefix\\\": \\\"forr\\\",\\n    \\\"body\\\": [\\n      \\\"for (int ${1:i} = $2 - 1; ${1:i} >= 0; ${1:i}--)$3\\\"\\n    ]\\n  },\\n  \\\"for (auto &e : container)\\\": {\\n    \\\"prefix\\\": \\\"fore\\\",\\n    \\\"body\\\": [\\n      \\\"for (auto &e : $1) cout << e << \\\\\\\" \\\\\\\";\\\",\\n      \\\"cout << br;\\\"\\n    ]\\n  },\\n  \\\"for (auto &[] : container<pair>)\\\": {\\n    \\\"prefix\\\": \\\"forc\\\",\\n    \\\"body\\\": [\\n      \\\"for (auto &[f, s] : $1) {\\\",\\n      \\\"}\\\"\\n    ]\\n  },\\n  \\\"void preCalculate()\\\": {\\n    \\\"prefix\\\": \\\"fpre\\\",\\n    \\\"body\\\": [\\n      \\\"void preCalculate($3) {\\\",\\n      \\\"}\\\"\\n    ]\\n  },\\n  \\\"function preCalculate\\\": {\\n    \\\"prefix\\\": \\\"funpre\\\",\\n    \\\"body\\\": [\\n      \\\"function<int$1(int)> preCalculate = [&](int n) {\\\",\\n      \\\"};\\\"\\n    ]\\n  },\\n  \\\"read test case\\\": {\\n    \\\"prefix\\\": \\\"tt\\\",\\n    \\\"body\\\": [\\n      \\\"int tt;\\\",\\n      \\\"cin >> tt;\\\",\\n      \\\"while (tt--) {\\\",\\n      \\\"\\\\t$1\\\",\\n      \\\"}\\\",\\n    ]\\n  },\\n  \\\"#include <bits/stdc++.h>\\\": {\\n    \\\"prefix\\\": \\\"incl\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>$1\\\"\\n    ]\\n  },\\n  \\\"#define\\\": {\\n    \\\"prefix\\\": \\\"def\\\",\\n    \\\"body\\\": [\\n      \\\"#define $1\\\"\\n    ]\\n  },\\n  \\\"simple input\\\": {\\n    \\\"prefix\\\": \\\"cii\\\",\\n    \\\"body\\\": [\\n      \\\"cin >> $1;\\\"\\n    ]\\n  },\\n  \\\"multiple input\\\": {\\n    \\\"prefix\\\": \\\"ciim\\\",\\n    \\\"body\\\": [\\n      \\\"cin >> $1 >> $2 >> $3 >> $4;\\\"\\n    ]\\n  },\\n  \\\"simple output\\\": {\\n    \\\"prefix\\\": \\\"coo\\\",\\n    \\\"body\\\": [\\n      \\\"cout << $1;\\\"\\n    ]\\n  },\\n  \\\"multiple output\\\": {\\n    \\\"prefix\\\": \\\"coom\\\",\\n    \\\"body\\\": [\\n      \\\"cout << $1 << $2 << $3 << $4;\\\"\\n    ]\\n  },\\n  \\\"scanf\\\": {\\n    \\\"prefix\\\": \\\"sc\\\",\\n    \\\"body\\\": [\\n      \\\"scanf(\\\\\\\"%d$1\\\\\\\\n\\\\\\\", &$2);\\\"\\n    ]\\n  },\\n  \\\"printf\\\": {\\n    \\\"prefix\\\": \\\"pr\\\",\\n    \\\"body\\\": [\\n      \\\"printf(\\\\\\\"%d\\\\\\\\n$1\\\\\\\", $2);\\\"\\n    ]\\n  },\\n  \\\"printf ternary operator\\\": {\\n    \\\"prefix\\\": \\\"pot\\\",\\n    \\\"body\\\": [\\n      \\\"printf(\\\\\\\"%d$1\\\\\\\\n\\\\\\\", ($2 ? $3 : $4));\\\"\\n    ]\\n  },\\n  \\\"cout ternary operator 1\\\": {\\n    \\\"prefix\\\": \\\"coot\\\",\\n    \\\"body\\\": [\\n      \\\"cout << ($1 ? $2 : $3) << br;\\\"\\n    ]\\n  },\\n  \\\"cout ternary operator 2\\\": {\\n    \\\"prefix\\\": \\\"coov\\\",\\n    \\\"body\\\": [\\n      \\\"cout << ($1 ? \\\\\\\"YES\\\\\\\" : \\\\\\\"NO\\\\\\\") << br;\\\"\\n    ]\\n  },\\n  \\\".begin() & .end()\\\": {\\n    \\\"prefix\\\": \\\"all\\\",\\n    \\\"body\\\": [\\n      \\\"$1.begin(), $1.end()\\\"\\n    ]\\n  },\\n  \\\".rbegin() & .rend()\\\": {\\n    \\\"prefix\\\": \\\"rall\\\",\\n    \\\"body\\\": [\\n      \\\"$1.rbegin(), $1.rend()\\\"\\n    ]\\n  },\\n  \\\"return\\\": {\\n    \\\"prefix\\\": \\\"ret\\\",\\n    \\\"body\\\": [\\n      \\\"return$1;\\\"\\n    ]\\n  },\\n  \\\"set const N\\\": {\\n    \\\"prefix\\\": \\\"setn\\\",\\n    \\\"body\\\": [\\n      \\\"const int N = int(1e$1) + 10;\\\"\\n    ]\\n  },\\n  \\\"Header\\\": {\\n    \\\"prefix\\\": \\\"author\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   author:  josuerom\\\",\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n    ]\\n  },\\n  \\\"set hour and date\\\": {\\n    \\\"prefix\\\": \\\"date\\\",\\n    \\\"body\\\": [\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\"\\n    ]\\n  },\\n  \\\"style josuerom\\\": {\\n    \\\"prefix\\\": \\\"header\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\"   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█\\\",\\n      \\\"   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█\\\",\\n      \\\"   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\"\\n    ]\\n  },\\n  \\\"#pragma GCC\\\": {\\n    \\\"prefix\\\": \\\"ofast\\\",\\n    \\\"body\\\": [\\n      \\\"#pragma GCC optimize(\\\\\\\"Ofast\\\\\\\")\\\",\\n    ]\\n  },\\n  \\\"Codeforces template\\\": {\\n    \\\"prefix\\\": \\\"tem1\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   author:  josuerom\\\",\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\\n\\\",\\n      \\\"#ifdef LOCAL\\\",\\n      \\\"#include \\\\\\\"../auto/debug.h\\\\\\\"\\\",\\n      \\\"#else\\\",\\n      \\\"#define debug(...) 42\\\",\\n      \\\"#endif\\\\n\\\",\\n      \\\"#define ll  long long\\\",\\n      \\\"#define br  '\\\\\\\\n'\\\",\\n      \\\"\\\\n$2\\\\n\\\",\\n      \\\"void solve() {\\\",\\n      \\\"}\\\\n\\\",\\n      \\\"int main() {\\\",\\n      \\\"\\\\tios::sync_with_stdio(false);\\\",\\n      \\\"\\\\tcin.tie(0);\\\",\\n      \\\"\\\\tint tt = 1;\\\",\\n      \\\"\\\\tcin >> tt;$1\\\",\\n      \\\"#ifdef LOCAL\\\",\\n      \\\"\\\\tint nc = 1;\\\",\\n      \\\"\\\\twhile (tt--) {\\\",\\n      \\\"\\\\t\\\\tcout << \\\\\\\"Case #\\\\\\\" << nc++ << \\\\\\\":\\\\\\\\n\\\\\\\";\\\",\\n      \\\"\\\\t\\\\tsolve();\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"#else\\\",\\n      \\\"\\\\twhile (tt--) solve();\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\\treturn 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla especial para CF\\\"\\n  },\\n  \\\"Ultra light template\\\": {\\n    \\\"prefix\\\": \\\"tem2\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\"   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█\\\",\\n      \\\"   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█\\\",\\n      \\\"   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n      \\\"#include <bits/stdc++.h>\\\\n\\\",\\n      \\\"using namespace std;\\\\n\\\",\\n      \\\"int main() {\\\",\\n      \\\"\\\\tios::sync_with_stdio(false);\\\",\\n      \\\"\\\\tcin.tie(0);\\\",\\n      \\\"\\\\t$2\\\",\\n      \\\"\\\\treturn 0;\\\",\\n      \\\"}\\\",\\n    ],\\n    \\\"description\\\": \\\"Plantilla estándar ultra liviana\\\"\\n  },\\n  \\\"2 Bits() team template\\\": {\\n    \\\"prefix\\\": \\\"tem3\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   █▀█  █▀▀▄ ─▀─ ▀▀█▀▀ █▀▀ ▄▀ ▀▄\\\",\\n      \\\" *   ─▄▀  █▀▀▄ ▀█▀ ──█── ▀▀█ █─ ─█\\\",\\n      \\\" *   █▄▄  ▀▀▀─ ▀▀▀ ──▀── ▀▀▀ ▀▄ ▄▀\\\",\\n      \\\"**/\\\",\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\\n\\\",\\n      \\\"#define ll  long long\\\",\\n      \\\"#define br  '\\\\\\\\n'\\\\n\\\",\\n      \\\"class RPCProblem${TM_FILENAME_BASE} {\\\",\\n      \\\"public:\\\",\\n      \\\"\\\\tstatic const int N = int(1e$2) + 30;\\\",\\n      \\\"\\\\tint a[N], n;\\\\n\\\",\\n      \\\"\\\\tvoid solveOne() {\\\",\\n      \\\"\\\\t}\\\\n\\\",\\n      \\\"\\\\tvoid tcReading() {\\\",\\n      \\\"\\\\t\\\\tint tt;\\\",\\n      \\\"\\\\t\\\\tcin >> tt;\\\",\\n      \\\"#ifdef LOCAL\\\",\\n      \\\"\\\\t\\\\tint nc = 1;\\\",\\n      \\\"\\\\t\\\\twhile (tt--) {\\\",\\n      \\\"\\\\t\\\\t\\\\tcout << \\\\\\\"Case #\\\\\\\" << nc++ << \\\\\\\":\\\\\\\\n\\\\\\\";\\\",\\n      \\\"\\\\t\\\\t\\\\tsolveOne();\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"#else\\\",\\n      \\\"\\\\t\\\\twhile (tt--) solveOne();\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"};\\\\n\\\",\\n      \\\"int main() {\\\",\\n      \\\"\\\\tRPCProblem${TM_FILENAME_BASE} me;\\\",\\n      \\\"\\\\tme.tcReading();$1\\\",\\n      \\\"\\\\t// me.solveOne();$1\\\",\\n      \\\"\\\\tsystem(\\\\\\\"pause\\\\\\\");\\\",\\n      \\\"\\\\treturn 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla equipo 2 BITS()\\\"\\n  },\\n  \\\"Um_nik template\\\": {\\n    \\\"prefix\\\": \\\"tem4\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   author:  josuerom\\\",\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"#ifdef LOCAL\\\",\\n      \\\"\\\\t#define eprintf(...) {fprintf(stderr, __VA_ARGS__); fflush(stderr);}\\\",\\n      \\\"#else\\\",\\n      \\\"\\\\t#define eprintf(...) 42\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\",\\n      \\\"using ll = long long;\\\",\\n      \\\"using ld = long double;
\\\",\\n      \\\"using uint = unsigned int;\\\",\\n      \\\"using ull = unsigned long long;\\\",\\n      \\\"using pii = pair<int, int>;\\\",\\n      \\\"using psi = pair<string, int>;\\\",\\n      \\\"using pll = pair<ll, ll>;\\\",\\n      \\\"mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\\\",\\n      \\\"ll randomNumber(ll B) {\\\",\\n      \\\"   return (ull)rng() % B;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"#define pb  push_back\\\",\\n      \\\"#define ss  second\\\",\\n      \\\"#define ff  first\\\",\\n      \\\"\\\",\\n      \\\"clock_t startTime;\\\",\\n      \\\"double getSolutionTime() {\\\",\\n      \\\"   return (double)(clock() - startTime) / CLOCKS_PER_SEC;\\\",\\n      \\\"}\\\\n\\\",\\n      \\\"$2\\\\n\\\",\\n      \\\"void solve() {\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"int main() {\\\",\\n      \\\"   startTime = clock();\\\",\\n      \\\"   int T = 1;\\\",\\n      \\\"   scanf(\\\\\\\"%d\\\\\\\", &T);$1\\\",\\n      \\\"   for (int i = 1; i <= T; i++) {\\\",\\n      \\\"      eprintf(\\\\\\\"Case #%d:\\\\\\\\n\\\\\\\", i);\\\",\\n      \\\"      solve();\\\",\\n      \\\"      eprintf(\\\\\\\"time %.4lf ms\\\\\\\\n\\\\\\\", getSolutionTime());\\\",\\n      \\\"  }\\\",\\n      \\\"  return 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla de Um_nik C++17\\\"\\n  },\\n  \\\"Petr template\\\": {\\n    \\\"prefix\\\": \\\"tem5\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" * Template code generated by JHelper\\\",\\n      \\\" * More info: https://github.com/AlexeyDmitriev/JHelper\\\",\\n      \\\" * The solution is at the end\\\",\\n      \\\"\\\",\\n      \\\" *  author:  josuerom\\\",\\n      \\\" *  created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\" **/\\\\n\\\",\\n      \\\"#undef NDEBUG\\\\n\\\",\\n      \\\"#include <algorithm>\\\",\\n      \\\"#include <array>\\\",\\n      \\\"#include <bitset>\\\",\\n      \\\"#include <cassert>\\\",\\n      \\\"#include <climits>\\\",\\n      \\\"#include <cstdint>\\\",\\n      \\\"#include <cmath>\\\",\\n      \\\"#include <complex>\\\",\\n      \\\"#include <cstdio>\\\",\\n      \\\"#include <cstdlib>\\\",\\n      \\\"#include <cstring>\\\",\\n      \\\"#include <functional>\\\",\\n      \\\"#include <iomanip>\\\",\\n      \\\"#include <iostream>\\\",\\n      \\\"#include <map>\\\",\\n      \\\"#include <memory>\\\",\\n      \\\"#include <numeric>\\\",\\n      \\\"#include <queue>\\\",\\n      \\\"#include <random>\\\",\\n      \\\"#include <set>\\\",\\n      \\\"#include <stack>\\\",\\n      \\\"#include <string>\\\",\\n      \\\"#include <unordered_set>\\\",\\n      \\\"#include <unordered_map>\\\",\\n      \\\"#include <vector>\\\",\\n      \\\"// AtCoder library from https://github.com/atcoder/ac-library\\\",\\n      \\\"#ifndef ATCODER_CONVOLUTION_HPP\\\",\\n      \\\"#define ATCODER_CONVOLUTION_HPP 1\\\\n\\\",\\n      \\\"#include <type_traits>\\\\n\\\",\\n      \\\"#ifndef ATCODER_INTERNAL_BITOP_HPP\\\",\\n      \\\"#define ATCODER_INTERNAL_BITOP_HPP 1\\\\n\\\",\\n      \\\"#ifdef _MSC_VER\\\",\\n      \\\"#include <intrin.h>\\\",\\n      \\\"#endif\\\\n\\\",\\n      \\\"namespace atcoder {\\\",\\n      \\\"   namespace internal {\\\",\\n      \\\"      // @param n `0 <= n`\\\",\\n      \\\"      // @return minimum non-negative `x` s.t. `n <= 2**x`\\\",\\n      \\\"      int ceil_pow2(int n) {\\\",\\n      \\\"         int x = 0;\\\",\\n      \\\"         while ((1U << x) < (unsigned int)(n))\\\",\\n      \\\"            x++;\\\",\\n      \\\"         return x;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      // @param n `1 <= n`\\\",\\n      \\\"      // @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`\\\",\\n      \\\"      int bsf(unsigned int n) {\\\",\\n      \\\"         #ifdef _MSC_VER\\\",\\n      \\\"         unsigned long index;\\\",\\n      \\\"         _BitScanForward(&index, n);\\\",\\n      \\\"         return index;\\\",\\n      \\\"         #else\\\",\\n      \\\"         return __builtin_ctz(n);\\\",\\n      \\\"         #endif\\\",\\n      \\\"      }\\\",\\n      \\\"   } // namespace internal\\\",\\n      \\\"} // namespace atcoder\\\",\\n      \\\"#endif // ATCODER_INTERNAL_BITOP_HPP\\\",\\n      \\\"\\\",\\n      \\\"#ifndef ATCODER_MODINT_HPP\\\",\\n      \\\"#define ATCODER_MODINT_HPP 1\\\",\\n      \\\"\\\",\\n      \\\"#ifdef _MSC_VER\\\",\\n      \\\"\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\",\\n      \\\"#ifndef ATCODER_INTERNAL_MATH_HPP\\\",\\n      \\\"#define ATCODER_INTERNAL_MATH_HPP 1\\\",\\n      \\\"\\\",\\n      \\\"#include <utility>\\\",\\n      \\\"\\\",\\n      \\\"#ifdef _MSC_VER\\\",\\n      \\\"\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\",\\n      \\\"namespace atcoder {\\\",\\n      \\\"   namespace internal {\\\",\\n      \\\"      // @param m `1 <= m`\\\",\\n      \\\"      // @return x mod m\\\",\\n      \\\"      constexpr long long safe_mod(long long x, long long m) {\\\",\\n      \\\"         x %= m;\\\",\\n      \\\"         if (x < 0)\\\",\\n      \\\"            x += m;\\\",\\n      \\\"         return x;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      // Fast modular multiplication by barrett reduction\\\",\\n      \\\"      // Reference: https://en.wikipedia.org/wiki/Barrett_reduction\\\",\\n      \\\"      // NOTE: reconsider after Ice Lake\\\",\\n      \\\"      struct barrett {\\\",\\n      \\\"         unsigned int _m;\\\",\\n      \\\"         unsigned long long im;\\\",\\n      \\\"\\\",\\n      \\\"         // @param m `1 <= m < 2^31`\\\",\\n      \\\"         barrett(unsigned int m) : _m(m), im((unsigned long long)(-1) / m + 1) {}\\\",\\n      \\\"\\\",\\n      \\\"         // @return m\\\",\\n      \\\"         unsigned int umod() const { return _m; }\\\",\\n      \\\"\\\",\\n      \\\"         // @param a `0 <= a < m`\\\",\\n      \\\"         // @param b `0 <= b < m`\\\",\\n      \\\"         // @return `a * b % m`\\\",\\n      \\\"         unsigned int mul(unsigned int a, unsigned int b) const {\\\",\\n      \\\"            // [1] m = 1\\\",\\n      \\\"            // a = b = im = 0, so okay\\\",\\n      \\\"\\\",\\n      \\\"            // [2] m >= 2\\\",\\n      \\\"            // im = ceil(2^64 / m)\\\",\\n      \\\"            // -> im * m = 2^64 + r (0 <= r < m)\\\",\\n      \\\"            // let z = a*b = c*m + d (0 <= c, d < m)\\\",\\n      \\\"            // a*b * im = (c*m + d) * im = c*(im*m) + d*im = c*2^64 + c*r + d*im\\\",\\n      \\\"            // c*r + d*im < m * m + m * im < m * m + 2^64 + m <= 2^64 + m * (m + 1) < 2^64 * 2\\\",\\n      \\\"            // ((ab * im) >> 64) == c or c + 1\\\",\\n      \\\"            unsigned long long z = a;\\\",\\n      \\\"            z *= b;\\\",\\n      \\\"            #ifdef _MSC_VER\\\",\\n      \\\"            unsigned long long x;\\\",\\n      \\\"            _umul128(z, im, &x);\\\",\\n      \\\"            #else\\\",\\n      \\\"            unsigned long long x =\\\",\\n      \\\"                (unsigned long long)(((unsigned __int128)(z)*im) >> 64);\\\",\\n      \\\"            #endif\\\",\\n      \\\"            unsigned int v = (unsigned int)(z - x * _m);\\\",\\n      \\\"            if (_m <= v)\\\",\\n      \\\"               v += _m;\\\",\\n      \\\"            return v;\\\",\\n      \\\"         }\\\",\\n      \\\"      };\\\",\\n      \\\"\\\",\\n      \\\"      // @param n `0 <= n`\\\",\\n      \\\"      // @param m `1 <= m`\\\",\\n      \\\"      // @return `(x ** n) % m`\\\",\\n      \\\"      constexpr long long pow_mod_constexpr(long long x, long long n, int m) {\\\",\\n      \\\"         if (m == 1)\\\",\\n      \\\"            return 0;\\\",\\n      \\\"         unsigned int _m = (unsigned int)(m);\\\",\\n      \\\"         unsigned long long r = 1;\\\",\\n      \\\"         unsigned long long y = safe_mod(x, m);\\\",\\n      \\\"         while (n) {\\\",\\n      \\\"            if (n & 1)\\\",\\n      \\\"               r = (r * y) % _m;\\\",\\n      \\\"            y = (y * y) % _m;\\\",\\n      \\\"            n >>= 1;\\\",\\n      \\\"         }\\\",\\n      \\\"         return r;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      // Reference:\\\",\\n      \\\"      // M. Forisek and J. Jancina,\\\",\\n      \\\"      // Fast Primality Testing for Integers That Fit into a Machine Word\\\",\\n      \\\"      // @param n `0 <= n`\\\",\\n      \\\"      constexpr bool is_prime_constexpr(int n) {\\\",\\n      \\\"         if (n <= 1)\\\",\\n      \\\"            return false;\\\",\\n      \\\"         if (n == 2 || n == 7 || n == 61)\\\",\\n      \\\"            return true;\\\",\\n      \\\"         if (n % 2 == 0)\\\",\\n      \\\"            return false;\\\",\\n      \\\"         long long d = n - 1;\\\",\\n      \\\"         while (d % 2 == 0)\\\",\\n      \\\"            d /= 2;\\\",\\n      \\\"         constexpr long long bases[3] = {2, 7, 61};\\\",\\n      \\\"         for (long long a : bases) {\\\",\\n      \\\"            long long t = d;\\\",\\n      \\\"            long long y = pow_mod_constexpr(a, t, n);\\\",\\n      \\\"            while (t != n - 1 && y != 1 && y != n - 1)\\\",\\n      \\\"            {\\\",\\n      \\\"               y = y * y % n;\\\",\\n      \\\"               t <<= 1;\\\",\\n      \\\"            }\\\",\\n      \\\"            if (y != n - 1 && t % 2 == 0)\\\",\\n      \\\"            {\\\",\\n      \\\"               return false;\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"         return true;\\\",\\n      \\\"      }\\\",\\n      \\\"      template <int n>\\\",\\n      \\\"      constexpr bool is_prime = is_prime_constexpr(n);\\\",\\n      \\\"\\\",\\n      \\\"      // @param b `1 <= b`\\\",\\n      \\\"      // @return pair(g, x) s.t. g = gcd(a, b), xa = g (mod b), 0 <= x < b/
g\\\",\\n      \\\"      constexpr std::pair<long long, long long> inv_gcd(long long a, long long b) {\\\",\\n      \\\"         a = safe_mod(a, b);\\\",\\n      \\\"         if (a == 0)\\\",\\n      \\\"            return {b, 0};\\\",\\n      \\\"\\\",\\n      \\\"         // Contracts:\\\",\\n      \\\"         // [1] s - m0 * a = 0 (mod b)\\\",\\n      \\\"         // [2] t - m1 * a = 0 (mod b)\\\",\\n      \\\"         // [3] s * |m1| + t * |m0| <= b\\\",\\n      \\\"         long long s = b, t = a;\\\",\\n      \\\"         long long m0 = 0, m1 = 1;\\\",\\n      \\\"\\\",\\n      \\\"         while (t) {\\\",\\n      \\\"            long long u = s / t;\\\",\\n      \\\"            s -= t * u;\\\",\\n      \\\"            m0 -= m1 * u; // |m1 * u| <= |m1| * s <= b\\\",\\n      \\\"\\\",\\n      \\\"            // [3]:\\\",\\n      \\\"            // (s - t * u) * |m1| + t * |m0 - m1 * u|\\\",\\n      \\\"            // <= s * |m1| - t * u * |m1| + t * (|m0| + |m1| * u)\\\",\\n      \\\"            // = s * |m1| + t * |m0| <= b\\\",\\n      \\\"\\\",\\n      \\\"            auto tmp = s;\\\",\\n      \\\"            s = t;\\\",\\n      \\\"            t = tmp;\\\",\\n      \\\"            tmp = m0;\\\",\\n      \\\"            m0 = m1;\\\",\\n      \\\"            m1 = tmp;\\\",\\n      \\\"         }\\\",\\n      \\\"         // by [3]: |m0| <= b/g\\\",\\n      \\\"         // by g != b: |m0| < b/g\\\",\\n      \\\"         if (m0 < 0)\\\",\\n      \\\"            m0 += b / s;\\\",\\n      \\\"         return {s, m0};\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      // Compile time primitive root\\\",\\n      \\\"      // @param m must be prime\\\",\\n      \\\"      // @return primitive root (and minimum in now)\\\",\\n      \\\"      constexpr int primitive_root_constexpr(int m) {\\\",\\n      \\\"         if (m == 2)\\\",\\n      \\\"            return 1;\\\",\\n      \\\"         if (m == 167772161)\\\",\\n      \\\"            return 3;\\\",\\n      \\\"         if (m == 469762049)\\\",\\n      \\\"            return 3;\\\",\\n      \\\"         if (m == 754974721)\\\",\\n      \\\"            return 11;\\\",\\n      \\\"         if (m == 998244353)\\\",\\n      \\\"            return 3;\\\",\\n      \\\"         int divs[20] = {};\\\",\\n      \\\"         divs[0] = 2;\\\",\\n      \\\"         int cnt = 1;\\\",\\n      \\\"         int x = (m - 1) / 2;\\\",\\n      \\\"         while (x % 2 == 0)\\\",\\n      \\\"            x /= 2;\\\",\\n      \\\"         for (int i = 3; (long long)(i)*i <= x; i += 2) {\\\",\\n      \\\"            if (x % i == 0) {\\\",\\n      \\\"               divs[cnt++] = i;\\\",\\n      \\\"               while (x % i == 0)\\\",\\n      \\\"               {\\\",\\n      \\\"                  x /= i;\\\",\\n      \\\"               }\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"         if (x > 1) {\\\",\\n      \\\"            divs[cnt++] = x;\\\",\\n      \\\"         }\\\",\\n      \\\"         for (int g = 2;; g++) {\\\",\\n      \\\"            bool ok = true;\\\",\\n      \\\"            for (int i = 0; i < cnt; i++) {\\\",\\n      \\\"               if (pow_mod_constexpr(g, (m - 1) / divs[i], m) == 1) {\\\",\\n      \\\"                  ok = false;\\\",\\n      \\\"                  break;\\\",\\n      \\\"               }\\\",\\n      \\\"            }\\\",\\n      \\\"            if (ok)\\\",\\n      \\\"               return g;\\\",\\n      \\\"         }\\\",\\n      \\\"      }\\\",\\n      \\\"      template <int m>\\\",\\n      \\\"      constexpr int primitive_root = primitive_root_constexpr(m);\\\",\\n      \\\"   } // namespace internal\\\",\\n      \\\"} // namespace atcoder\\\",\\n      \\\"#endif // ATCODER_INTERNAL_MATH_HPP\\\",\\n      \\\"\\\",\\n      \\\"#ifndef ATCODER_INTERNAL_TYPE_TRAITS_HPP\\\",\\n      \\\"#define ATCODER_INTERNAL_TYPE_TRAITS_HPP 1\\\",\\n      \\\"\\\",\\n      \\\"namespace atcoder {\\\",\\n      \\\"   namespace internal {\\\",\\n      \\\"      #ifndef _MSC_VER\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_signed_int128 =\\\",\\n      \\\"          typename std::conditional<std::is_same<T, __int128_t>::value ||\\\",\\n      \\\"                                    std::is_same<T, __int128>::value,\\\",\\n      \\\"                                    std::true_type,\\\",\\n      \\\"                                    std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_unsigned_int128 =\\\",\\n      \\\"          typename std::conditional<std::is_same<T, __uint128_t>::value ||\\\",\\n      \\\"                                    std::is_same<T, unsigned __int128>::value,\\\",\\n      \\\"                                    std::true_type,\\\",\\n      \\\"                                    std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using make_unsigned_int128 =\\\",\\n      \\\"          typename std::conditional<std::is_same<T, __int128_t>::value,\\\",\\n      \\\"                                    __uint128_t,\\\",\\n      \\\"                                    unsigned __int128>;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_integral = typename std::conditional<std::is_integral<T>::value ||\\\",\\n      \\\"                                                         is_signed_int128<T>::value ||\\\",\\n      \\\"                                                         is_unsigned_int128<T>::value,\\\",\\n      \\\"                                                    std::true_type,\\\",\\n      \\\"                                                    std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_signed_int = typename std::conditional<(is_integral<T>::value &&\\\",\\n      \\\"                                                       std::is_signed<T>::value) ||\\\",\\n      \\\"                                                       is_signed_int128<T>::value,\\\",\\n      \\\"                                                       std::true_type,\\\",\\n      \\\"                                                       std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_unsigned_int =\\\",\\n      \\\"          typename std::conditional<(is_integral<T>::value &&\\\",\\n      \\\"                                     std::is_unsigned<T>::value) ||\\\",\\n      \\\"                                     is_unsigned_int128<T>::value,\\\",\\n      \\\"                                     std::true_type,\\\",\\n      \\\"                                     std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using to_unsigned = typename std::conditional<\\\",\\n      \\\"          is_signed_int128<T>::value,\\\",\\n      \\\"          make_unsigned_int128<T>,\\\",\\n      \\\"          typename std::conditional<std::is_signed<T>::value,\\\",\\n      \\\"                                    std::make_unsigned<T>,\\\",\\n      \\\"                                    std::common_type<T>>::type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      #else\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_integral = typename std::is_integral<T>;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_signed_int =\\\",\\n      \\\"          typename std::conditional<is_integral<T>::value && std::is_signed<T>::value,\\\",\\n      \\\"                                    std::true_type,\\\",\\n      \\\"                                    std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_unsigned_int =\\\",\\n      \\\"          typename std::conditional<is_integral<T>::value &&\\\",\\n      \\\"                                        std::is_unsigned<T>::value,\\\",\\n      \\\"                                    std::true_type,\\\",\\n      \\\"                                    std::false_type>::type;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using to_unsigned = typename std::conditional<is_signed_int<T>::value,\\\",\\n      \\\"                                                    std::make_unsigned<T>,\\\",\\n      \\\"                                                    std::common_type<T>>::type;\\\",\\n      \\\"      #endif\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_signed_int_t = std::enable_if_t<is_signed_int<T>::value>;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_unsigned_int_t = std::enable_if_t<is_unsigned_int<T>::value>;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using to_unsigned_t = typename to_unsigned<T>::type;\\\",\\n      \\\"   } // namespace internal\\\",\\n      \\\"} // namespace atcoder\\\",\\n      \\\"\\\",\\n      \\\"#endif // ATCODER_INTERNAL_TYPE_TRAITS_HPP\\\",\\n      \\\"\\\",\\n      \\\"namespace atcoder {\\\",\\n      \\\"   namespace internal {\\\",\\n      \\\"      struct modint_base\\\",\\n      \\\"      {\\\",\\n      \\\"      };\\\",\\n      \\\"      struct static_modint_base : modint_base\\\",\\n      \\\"      {\\\",\\n      \\\"      };\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_modint = std::is_base_of<modint_base, T>;\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_modint_t = std::enable_if_t<is_modint<T>::value>;\\\",\\n      \\\"   } // namespace internal\\\",\\n      \\\"\\\",\\n      \\\"   template <int m, std::enable_if_t<(1 <= m)> * = nullptr>\\\",\\n      \\\"   struct static_modint : internal:
:static_modint_base {\\\",\\n      \\\"      using mint = static_modint;\\\",\\n      \\\"\\\",\\n      \\\"   public:\\\",\\n      \\\"      static constexpr int mod() { return m; }\\\",\\n      \\\"      static mint raw(int v) {\\\",\\n      \\\"         mint x;\\\",\\n      \\\"         x._v = v;\\\",\\n      \\\"         return x;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      static_modint() : _v(0) {}\\\",\\n      \\\"      template <class T, internal::is_signed_int_t<T> * = nullptr>\\\",\\n      \\\"      static_modint(T v)\\\",\\n      \\\"      {\\\",\\n      \\\"         long long x = (long long)(v % (long long)(umod()));\\\",\\n      \\\"         if (x < 0)\\\",\\n      \\\"            x += umod();\\\",\\n      \\\"         _v = (unsigned int)(x);\\\",\\n      \\\"      }\\\",\\n      \\\"      template <class T, internal::is_unsigned_int_t<T> * = nullptr>\\\",\\n      \\\"      static_modint(T v)\\\",\\n      \\\"      {\\\",\\n      \\\"         _v = (unsigned int)(v % umod());\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      unsigned int val() const { return _v; }\\\",\\n      \\\"\\\",\\n      \\\"      mint &operator++()\\\",\\n      \\\"      {\\\",\\n      \\\"         _v++;\\\",\\n      \\\"         if (_v == umod())\\\",\\n      \\\"            _v = 0;\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator--()\\\",\\n      \\\"      {\\\",\\n      \\\"         if (_v == 0)\\\",\\n      \\\"            _v = umod();\\\",\\n      \\\"         _v--;\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint operator++(int)\\\",\\n      \\\"      {\\\",\\n      \\\"         mint result = *this;\\\",\\n      \\\"         ++*this;\\\",\\n      \\\"         return result;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint operator--(int)\\\",\\n      \\\"      {\\\",\\n      \\\"         mint result = *this;\\\",\\n      \\\"         --*this;\\\",\\n      \\\"         return result;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      mint &operator+=(const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         _v += rhs._v;\\\",\\n      \\\"         if (_v >= umod())\\\",\\n      \\\"            _v -= umod();\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator-=(const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         _v -= rhs._v;\\\",\\n      \\\"         if (_v >= umod())\\\",\\n      \\\"            _v += umod();\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator*=(const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         unsigned long long z = _v;\\\",\\n      \\\"         z *= rhs._v;\\\",\\n      \\\"         _v = (unsigned int)(z % umod());\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator/=(const mint &rhs) { return *this = *this * rhs.inv(); }\\\",\\n      \\\"\\\",\\n      \\\"      mint operator+() const { return *this; }\\\",\\n      \\\"      mint operator-() const { return mint() - *this; }\\\",\\n      \\\"\\\",\\n      \\\"      mint pow(long long n) const\\\",\\n      \\\"      {\\\",\\n      \\\"         assert(0 <= n);\\\",\\n      \\\"         mint x = *this, r = 1;\\\",\\n      \\\"         while (n) {\\\",\\n      \\\"            if (n & 1)\\\",\\n      \\\"               r *= x;\\\",\\n      \\\"            x *= x;\\\",\\n      \\\"            n >>= 1;\\\",\\n      \\\"         }\\\",\\n      \\\"         return r;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint inv() const\\\",\\n      \\\"      {\\\",\\n      \\\"         if (prime) {\\\",\\n      \\\"            assert(_v);\\\",\\n      \\\"            return pow(umod() - 2);\\\",\\n      \\\"         } else {\\\",\\n      \\\"            auto eg = internal::inv_gcd(_v, m);\\\",\\n      \\\"            assert(eg.first == 1);\\\",\\n      \\\"            return eg.second;\\\",\\n      \\\"         }\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      friend mint operator+(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) += rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend mint operator-(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) -= rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend mint operator*(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) *= rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend mint operator/(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) /= rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend bool operator==(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return lhs._v == rhs._v;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend bool operator!=(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return lhs._v != rhs._v;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"   private:\\\",\\n      \\\"      unsigned int _v;\\\",\\n      \\\"      static constexpr unsigned int umod() { return m; }\\\",\\n      \\\"      static constexpr bool prime = internal::is_prime<m>;\\\",\\n      \\\"   };\\\",\\n      \\\"\\\",\\n      \\\"   template <int id>\\\",\\n      \\\"   struct dynamic_modint : internal::modint_base {\\\",\\n      \\\"      using mint = dynamic_modint;\\\",\\n      \\\"\\\",\\n      \\\"   public:\\\",\\n      \\\"      static int mod() { return (int)(bt.umod()); }\\\",\\n      \\\"      static void set_mod(int m)\\\",\\n      \\\"      {\\\",\\n      \\\"         assert(1 <= m);\\\",\\n      \\\"         bt = internal::barrett(m);\\\",\\n      \\\"      }\\\",\\n      \\\"      static mint raw(int v)\\\",\\n      \\\"      {\\\",\\n      \\\"         mint x;\\\",\\n      \\\"         x._v = v;\\\",\\n      \\\"         return x;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      dynamic_modint() : _v(0) {}\\\",\\n      \\\"      template <class T, internal::is_signed_int_t<T> * = nullptr>\\\",\\n      \\\"      dynamic_modint(T v) {\\\",\\n      \\\"         long long x = (long long)(v % (long long)(mod()));\\\",\\n      \\\"         if (x < 0)\\\",\\n      \\\"            x += mod();\\\",\\n      \\\"         _v = (unsigned int)(x);\\\",\\n      \\\"      }\\\",\\n      \\\"      template <class T, internal::is_unsigned_int_t<T> * = nullptr>\\\",\\n      \\\"      dynamic_modint(T v) {\\\",\\n      \\\"         _v = (unsigned int)(v % mod());\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      unsigned int val() const { return _v; }\\\",\\n      \\\"\\\",\\n      \\\"      mint &operator++()\\\",\\n      \\\"      {\\\",\\n      \\\"         _v++;\\\",\\n      \\\"         if (_v == umod())\\\",\\n      \\\"            _v = 0;\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator--()\\\",\\n      \\\"      {\\\",\\n      \\\"         if (_v == 0)\\\",\\n      \\\"            _v = umod();\\\",\\n      \\\"         _v--;\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint operator++(int)\\\",\\n      \\\"      {\\\",\\n      \\\"         mint result = *this;\\\",\\n      \\\"         ++*this;\\\",\\n      \\\"         return result;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint operator--(int)\\\",\\n      \\\"      {\\\",\\n      \\\"         mint result = *this;\\\",\\n      \\\"         --*this;\\\",\\n      \\\"         return result;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      mint &operator+=(const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         _v += rhs._v;\\\",\\n      \\\"         if (_v >= umod())\\\",\\n      \\\"            _v -= umod();\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator-=(const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         _v += mod() - rhs._v;\\\",\\n      \\\"         if (_v >= umod())\\\",\\n      \\\"            _v -= umod();\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator*=(const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         _v = bt.mul(_v, rhs._v);\\\",\\n      \\\"         return *this;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint &operator/=(const mint &rhs) { return *this = *this * rhs.inv(); }\\\",\\n      \\\"\\\",\\n      \\\"      mint operator+() const { return *this; }\\\",\\n      \\\"      mint operator-() const { return mint() - *this; }\\\",\\n      \\\"\\\",\\n      \\\"      mint pow(long long n) const {\\\",\\n      \\\"         assert(0 <= n);\\\",\\n      \\\"         mint x = *this, r = 1;\\\",\\n      \\\"         while (n) {\\\",\\n      \\\"            if (n & 1)\\\",\\n      \\\"               r *= x;\\\",\\n      \\\"            x *= x;\\\",\\n      \\\"            n >>= 1;\\\",\\n      \\\"         }\\\",\\n      \\\"         return r;\\\",\\n      \\\"      }\\\",\\n      \\\"      mint inv() const {\\\",\\n      \\\"         auto eg = internal::inv_gcd(_v, mod());\\\",\\n      \\\"         assert(eg.first == 1);\\\",\\n      \\\"         return eg.second;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      friend mint operator+(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) += rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend mint operator-(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) -= rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend mint operator*(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n  
    \\\"         return mint(lhs) *= rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend mint operator/(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return mint(lhs) /= rhs;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend bool operator==(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return lhs._v == rhs._v;\\\",\\n      \\\"      }\\\",\\n      \\\"      friend bool operator!=(const mint &lhs, const mint &rhs)\\\",\\n      \\\"      {\\\",\\n      \\\"         return lhs._v != rhs._v;\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"   private:\\\",\\n      \\\"      unsigned int _v;\\\",\\n      \\\"      static internal::barrett bt;\\\",\\n      \\\"      static unsigned int umod() { return bt.umod(); }\\\",\\n      \\\"   };\\\",\\n      \\\"   template <int id>\\\",\\n      \\\"   internal::barrett dynamic_modint<id>::bt = 998244353;\\\",\\n      \\\"\\\",\\n      \\\"   using modint998244353 = static_modint<998244353>;\\\",\\n      \\\"   using modint1000000007 = static_modint<1000000007>;\\\",\\n      \\\"   using modint = dynamic_modint<-1>;\\\",\\n      \\\"\\\",\\n      \\\"   namespace internal {\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_static_modint = std::is_base_of<internal::static_modint_base, T>;\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_static_modint_t = std::enable_if_t<is_static_modint<T>::value>;\\\",\\n      \\\"\\\",\\n      \\\"      template <class>\\\",\\n      \\\"      struct is_dynamic_modint : public std::false_type\\\",\\n      \\\"      {\\\",\\n      \\\"      };\\\",\\n      \\\"      template <int id>\\\",\\n      \\\"      struct is_dynamic_modint<dynamic_modint<id>> : public std::true_type\\\",\\n      \\\"      {\\\",\\n      \\\"      };\\\",\\n      \\\"\\\",\\n      \\\"      template <class T>\\\",\\n      \\\"      using is_dynamic_modint_t = std::enable_if_t<is_dynamic_modint<T>::value>;\\\",\\n      \\\"   } // namespace internal\\\",\\n      \\\"} // namespace atcoder\\\",\\n      \\\"\\\",\\n      \\\"#endif // ATCODER_MODINT_HPP\\\",\\n      \\\"\\\",\\n      \\\"namespace atcoder {\\\",\\n      \\\"   namespace internal    {\\\",\\n      \\\"      template <class mint, internal::is_static_modint_t<mint> * = nullptr>\\\",\\n      \\\"      void butterfly(std::vector<mint> &a) {\\\",\\n      \\\"         static constexpr int g = internal::primitive_root<mint::mod()>;\\\",\\n      \\\"         int n = int(a.size());\\\",\\n      \\\"         int h = internal::ceil_pow2(n);\\\",\\n      \\\"\\\",\\n      \\\"         static bool first = true;\\\",\\n      \\\"         static mint sum_e[30]; // sum_e[i] = ies[0] * ... * ies[i - 1] * es[i]\\\",\\n      \\\"         if (first) {\\\",\\n      \\\"            first = false;\\\",\\n      \\\"            mint es[30], ies[30]; // es[i]^(2^(2+i)) == 1\\\",\\n      \\\"            int cnt2 = bsf(mint::mod() - 1);\\\",\\n      \\\"            mint e = mint(g).pow((mint::mod() - 1) >> cnt2), ie = e.inv();\\\",\\n      \\\"            for (int i = cnt2; i >= 2; i--) {\\\",\\n      \\\"               // e^(2^i) == 1\\\",\\n      \\\"               es[i - 2] = e;\\\",\\n      \\\"               ies[i - 2] = ie;\\\",\\n      \\\"               e *= e;\\\",\\n      \\\"               ie *= ie;\\\",\\n      \\\"            }\\\",\\n      \\\"            mint now = 1;\\\",\\n      \\\"            for (int i = 0; i <= cnt2 - 2; i++) {\\\",\\n      \\\"               sum_e[i] = es[i] * now;\\\",\\n      \\\"               now *= ies[i];\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"         for (int ph = 1; ph <= h; ph++) {\\\",\\n      \\\"            int w = 1 << (ph - 1), p = 1 << (h - ph);\\\",\\n      \\\"            mint now = 1;\\\",\\n      \\\"            for (int s = 0; s < w; s++) {\\\",\\n      \\\"               int offset = s << (h - ph + 1);\\\",\\n      \\\"               for (int i = 0; i < p; i++) {\\\",\\n      \\\"                  auto l = a[i + offset];\\\",\\n      \\\"                  auto r = a[i + offset + p] * now;\\\",\\n      \\\"                  a[i + offset] = l + r;\\\",\\n      \\\"                  a[i + offset + p] = l - r;\\\",\\n      \\\"               }\\\",\\n      \\\"               now *= sum_e[bsf(~(unsigned int)(s))];\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"      }\\\",\\n      \\\"\\\",\\n      \\\"      template <class mint, internal::is_static_modint_t<mint> * = nullptr>\\\",\\n      \\\"      void butterfly_inv(std::vector<mint> &a) {\\\",\\n      \\\"         static constexpr int g = internal::primitive_root<mint::mod()>;\\\",\\n      \\\"         int n = int(a.size());\\\",\\n      \\\"         int h = internal::ceil_pow2(n);\\\",\\n      \\\"\\\",\\n      \\\"         static bool first = true;\\\",\\n      \\\"         static mint sum_ie[30]; // sum_ie[i] = es[0] * ... * es[i - 1] * ies[i]\\\",\\n      \\\"         if (first) {\\\",\\n      \\\"            first = false;\\\",\\n      \\\"            mint es[30], ies[30]; // es[i]^(2^(2+i)) == 1\\\",\\n      \\\"            int cnt2 = bsf(mint::mod() - 1);\\\",\\n      \\\"            mint e = mint(g).pow((mint::mod() - 1) >> cnt2), ie = e.inv();\\\",\\n      \\\"            for (int i = cnt2; i >= 2; i--) {\\\",\\n      \\\"               // e^(2^i) == 1\\\",\\n      \\\"               es[i - 2] = e;\\\",\\n      \\\"               ies[i - 2] = ie;\\\",\\n      \\\"               e *= e;\\\",\\n      \\\"               ie *= ie;\\\",\\n      \\\"            }\\\",\\n      \\\"            mint now = 1;\\\",\\n      \\\"            for (int i = 0; i <= cnt2 - 2; i++) {\\\",\\n      \\\"               sum_ie[i] = ies[i] * now;\\\",\\n      \\\"               now *= es[i];\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"\\\",\\n      \\\"         for (int ph = h; ph >= 1; ph--) {\\\",\\n      \\\"            int w = 1 << (ph - 1), p = 1 << (h - ph);\\\",\\n      \\\"            mint inow = 1;\\\",\\n      \\\"            for (int s = 0; s < w; s++) {\\\",\\n      \\\"               int offset = s << (h - ph + 1);\\\",\\n      \\\"               for (int i = 0; i < p; i++) {\\\",\\n      \\\"                  auto l = a[i + offset];\\\",\\n      \\\"                  auto r = a[i + offset + p];\\\",\\n      \\\"                  a[i + offset] = l + r;\\\",\\n      \\\"                  a[i + offset + p] =\\\",\\n      \\\"                      (unsigned long long)(mint::mod() + l.val() - r.val()) *\\\",\\n      \\\"                      inow.val();\\\",\\n      \\\"               }\\\",\\n      \\\"               inow *= sum_ie[bsf(~(unsigned int)(s))];\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"      }\\\",\\n      \\\"   } // namespace internal\\\",\\n      \\\"\\\",\\n      \\\"   template <class mint, internal::is_static_modint_t<mint> * = nullptr>\\\",\\n      \\\"   std::vector<mint> convolution(std::vector<mint> a, std::vector<mint> b)\\\",\\n      \\\"   {\\\",\\n      \\\"      int n = int(a.size()), m = int(b.size());\\\",\\n      \\\"      if (!n || !m)\\\",\\n      \\\"         return {};\\\",\\n      \\\"      if (std::min(n, m) <= 60) {\\\",\\n      \\\"         if (n < m) {\\\",\\n      \\\"            std::swap(n, m);\\\",\\n      \\\"            std::swap(a, b);\\\",\\n      \\\"         }\\\",\\n      \\\"         std::vector<mint> ans(n + m - 1);\\\",\\n      \\\"         for (int i = 0; i < n; i++) {\\\",\\n      \\\"            for (int j = 0; j < m; j++) {\\\",\\n      \\\"               ans[i + j] += a[i] * b[j];\\\",\\n      \\\"            }\\\",\\n      \\\"         }\\\",\\n      \\\"         return ans;\\\",\\n      \\\"      }\\\",\\n      \\\"      int z = 1 << internal::ceil_pow2(n + m - 1);\\\",\\n      \\\"      a.resize(z);\\\",\\n      \\\"      internal::butterfly(a);\\\",\\n      \\\"      b.resize(z);\\\",\\n      \\\"      internal::butterfly(b);\\\",\\n      \\\"      for (int i = 0; i < z; i++)\\\",\\n      \\\"         a[i] *= b[i];\\\",\\n      \\\"      internal::butterfly_inv(a);\\\",\\n      \\\"      a.resize(n + m - 1);\\\",\\n      \\\"      mint iz = mint(z).inv();\\\",\\n      \\\"      for (int i = 0; i < n + m - 1; i++)\\\",\\n      \\\"         a[i] *= iz;\\\",\\n      \\\"      return a;\\\",\\n      \\\"   }\\\",\\n      \\\"\\\",\\n      \\\"   template <unsigned int mod = 998244353,\\\",\\n      \\\"             class T,\\\",\\n      \\\"             std::enable_if_t<internal::is_integral<T>::value> * = nullptr>\\\",\\n      \\\"   std::vector<T> convolution(const std::vector<T> &a, const std::vector<T> &b) {\\\",\\n      \\\"      int n = int(a.size()), m = int(b.size());\\\",\\n      \\\"      if (!n || !m)\\\",\\n      \\\"         return {};\\\",\\n      \\\"      using mint = static_modint<mod>;\\\",\\n      \\\"      std::vector<mint> a2(n), b2(m);\\\",\\n      \\\"      for (int i = 0; i < n; i++)\\\",\\n      \\\"         a2[i] = mint(a[i]);\\\",\\n      \\\"      for (int i = 0; i < m; i++)\\\",\\n      \\\"         b2[i] = mint(b[i]);\\\",\\n      \\\"      auto c2 = convolution(move(a2), move(b2));\\\",\\n      \\\"      std::vector<T> c(n + m - 1);\\\",\\n      \\\"      for (int i = 0; i < n + m - 1; i++)\\\",\\n      \\\"         c[i] = c2[i].val();\\\",\\n      \\\"      return c;\\\",\\n      \\\"   }\\\",\\n      \\\"\\\",\\n      \\\"   std::vector<long long> convolution_ll(const std::vector<long long> &a,\\\",\\n      \\\"                                         const std::vector<long long> &b) {\\\",\\n      \\\"      int n = int(a.size()), m = int(b.size());\\\",\\n      \\\"      if (!n || !m)\\\",\\n      \\\"         return {};\\\",\\n      \\\"\\\",\\n      \\\"      static constexpr unsigned long long MOD1 = 754974721; // 2^24\\\",\\n      \\\"     
 static constexpr unsigned long long MOD2 = 167772161; // 2^25\\\",\\n      \\\"      static constexpr unsigned long long MOD3 = 469762049; // 2^26\\\",\\n      \\\"      static constexpr unsigned long long M2M3 = MOD2 * MOD3;\\\",\\n      \\\"      static constexpr unsigned long long M1M3 = MOD1 * MOD3;\\\",\\n      \\\"      static constexpr unsigned long long M1M2 = MOD1 * MOD2;\\\",\\n      \\\"      static constexpr unsigned long long M1M2M3 = MOD1 * MOD2 * MOD3;\\\",\\n      \\\"\\\",\\n      \\\"      static constexpr unsigned long long i1 =\\\",\\n      \\\"          internal::inv_gcd(MOD2 * MOD3, MOD1).second;\\\",\\n      \\\"      static constexpr unsigned long long i2 =\\\",\\n      \\\"          internal::inv_gcd(MOD1 * MOD3, MOD2).second;\\\",\\n      \\\"      static constexpr unsigned long long i3 =\\\",\\n      \\\"          internal::inv_gcd(MOD1 * MOD2, MOD3).second;\\\",\\n      \\\"\\\",\\n      \\\"      auto c1 = convolution<MOD1>(a, b);\\\",\\n      \\\"      auto c2 = convolution<MOD2>(a, b);\\\",\\n      \\\"      auto c3 = convolution<MOD3>(a, b);\\\",\\n      \\\"\\\",\\n      \\\"      std::vector<long long> c(n + m - 1);\\\",\\n      \\\"      for (int i = 0; i < n + m - 1; i++) {\\\",\\n      \\\"         unsigned long long x = 0;\\\",\\n      \\\"         x += (c1[i] * i1) % MOD1 * M2M3;\\\",\\n      \\\"         x += (c2[i] * i2) % MOD2 * M1M3;\\\",\\n      \\\"         x += (c3[i] * i3) % MOD3 * M1M2;\\\",\\n      \\\"         // B = 2^63, -B <= x, r(real value) < B\\\",\\n      \\\"         // (x, x - M, x - 2M, or x - 3M) = r (mod 2B)\\\",\\n      \\\"         // r = c1[i] (mod MOD1)\\\",\\n      \\\"         // focus on MOD1\\\",\\n      \\\"         // r = x, x - M', x - 2M', x - 3M' (M' = M % 2^64) (mod 2B)\\\",\\n      \\\"         // r = x,\\\",\\n      \\\"         //     x - M' + (0 or 2B),\\\",\\n      \\\"         //     x - 2M' + (0, 2B or 4B),\\\",\\n      \\\"         //     x - 3M' + (0, 2B, 4B or 6B) (without mod!)\\\",\\n      \\\"         // (r - x) = 0, (0)\\\",\\n      \\\"         //           - M' + (0 or 2B), (1)\\\",\\n      \\\"         //           -2M' + (0 or 2B or 4B), (2)\\\",\\n      \\\"         //           -3M' + (0 or 2B or 4B or 6B) (3) (mod MOD1)\\\",\\n      \\\"         // we checked that\\\",\\n      \\\"         //   ((1) mod MOD1) mod 5 = 2\\\",\\n      \\\"         //   ((2) mod MOD1) mod 5 = 3\\\",\\n      \\\"         //   ((3) mod MOD1) mod 5 = 4\\\",\\n      \\\"         long long diff =\\\",\\n      \\\"             c1[i] - internal::safe_mod((long long)(x), (long long)(MOD1));\\\",\\n      \\\"         if (diff < 0)\\\",\\n      \\\"            diff += MOD1;\\\",\\n      \\\"         static constexpr unsigned long long offset[5] = {\\\",\\n      \\\"             0, 0, M1M2M3, 2 * M1M2M3, 3 * M1M2M3};\\\",\\n      \\\"         x -= offset[diff % 5];\\\",\\n      \\\"         c[i] = x;\\\",\\n      \\\"      }\\\",\\n      \\\"      return c;\\\",\\n      \\\"   }\\\",\\n      \\\"\\\",\\n      \\\"   template <typename mint>\\\",\\n      \\\"   std::vector<mint> convolution_threemods(const std::vector<mint> &a,\\\",\\n      \\\"                                           const std::vector<mint> &b) {\\\",\\n      \\\"      int n = int(a.size()), m = int(b.size());\\\",\\n      \\\"      if (!n || !m)\\\",\\n      \\\"         return {};\\\",\\n      \\\"\\\",\\n      \\\"      static constexpr unsigned long long MOD1 = 754974721; // 2^24\\\",\\n      \\\"      static constexpr unsigned long long MOD2 = 167772161; // 2^25\\\",\\n      \\\"      static constexpr unsigned long long MOD3 = 469762049; // 2^26\\\",\\n      \\\"      __int128 M2M3 = __int128(MOD2) * MOD3;\\\",\\n      \\\"      __int128 M1M3 = __int128(MOD1) * MOD3;\\\",\\n      \\\"      __int128 M1M2 = __int128(MOD1) * MOD2;\\\",\\n      \\\"      __int128 M1M2M3 = __int128(MOD1) * MOD2 * MOD3;\\\",\\n      \\\"\\\",\\n      \\\"      static constexpr unsigned long long i1 =\\\",\\n      \\\"          internal::inv_gcd(MOD2 * MOD3, MOD1).second;\\\",\\n      \\\"      static constexpr unsigned long long i2 =\\\",\\n      \\\"          internal::inv_gcd(MOD1 * MOD3, MOD2).second;\\\",\\n      \\\"      static constexpr unsigned long long i3 =\\\",\\n      \\\"          internal::inv_gcd(MOD1 * MOD2, MOD3).second;\\\",\\n      \\\"\\\",\\n      \\\"      std::vector<long long> la(a.size());\\\",\\n      \\\"      std::vector<long long> lb(b.size());\\\",\\n      \\\"      for (int i = 0; i < a.size(); ++i)\\\",\\n      \\\"         la[i] = a[i].val();\\\",\\n      \\\"      for (int i = 0; i < b.size(); ++i)\\\",\\n      \\\"         lb[i] = b[i].val();\\\",\\n      \\\"      auto c1 = convolution<MOD1>(la, lb);\\\",\\n      \\\"      auto c2 = convolution<MOD2>(la, lb);\\\",\\n      \\\"      auto c3 = convolution<MOD3>(la, lb);\\\",\\n      \\\"\\\",\\n      \\\"      std::vector<mint> c(n + m - 1);\\\",\\n      \\\"      for (int i = 0; i < n + m - 1; i++) {\\\",\\n      \\\"         __int128 x = 0;\\\",\\n      \\\"         x += (c1[i] * i1) % MOD1 * M2M3;\\\",\\n      \\\"         x += (c2[i] * i2) % MOD2 * M1M3;\\\",\\n      \\\"         x += (c3[i] * i3) % MOD3 * M1M2;\\\",\\n      \\\"         while (x >= M1M2M3)\\\",\\n      \\\"            x -= M1M2M3;\\\",\\n      \\\"         x %= mint::mod();\\\",\\n      \\\"         c[i] = x;\\\",\\n      \\\"      }\\\",\\n      \\\"      return c;\\\",\\n      \\\"   }\\\",\\n      \\\"}\\\",\\n      \\\"#endif // ATCODER_CONVOLUTION_HPP\\\",\\n      \\\"\\\",\\n      \\\"#ifdef DEBUG\\\",\\n      \\\"#include \\\\\\\"debug.h\\\\\\\"\\\",\\n      \\\"#else\\\",\\n      \\\"#define debug(...) 42\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\",\\n      \\\"#define pb   push_back\\\",\\n      \\\"#define mp   make_pair\\\",\\n      \\\"#define ss   second\\\",\\n      \\\"#define ff   first\\\",\\n      \\\"#define endl '\\\\\\\\n'\\\",\\n      \\\"\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"using ll = long long;\\\",\\n      \\\"using ull = unsigned long long;\\\",\\n      \\\"using uc = unsigned char;\\\",\\n      \\\"using ld = long double;\\\",\\n      \\\"using str = string;\\\",\\n      \\\"using mint = atcoder::modint1000000007;\\\",\\n      \\\"\\\",\\n      \\\"/* type format set to scanf\\\",\\n      \\\"\\\\tlong long int %lld\\\",\\n      \\\"\\\\tunsigned long long int %llu\\\",\\n      \\\"\\\\tchar & unsigned char %c\\\",\\n      \\\"\\\\tstring or read char[] %s\\\",\\n      \\\"\\\\tlong double %LF\\\",\\n      \\\"\\\\tdouble %lf\\\",\\n      \\\"\\\\tfloat %f\\\",\\n      \\\"\\\\tint %d\\\",\\n      \\\"\\\\tunsigned int %u\\\",\\n      \\\"*/\\\",\\n      \\\"\\\",\\n      \\\"// from https://codeforces.com/blog/entry/61306\\\",\\n      \\\"const int MOD = 1E9 + 7, SZ = 1E6; // or any prime\\\",\\n      \\\"\\\",\\n      \\\"ll qp(ll a, ll b) {\\\",\\n      \\\"   ll x = 1;\\\",\\n      \\\"   a %= MOD;\\\",\\n      \\\"   while (b) {\\\",\\n      \\\"      if (b & 1)\\\",\\n      \\\"         x = x * a % MOD;\\\",\\n      \\\"      a = a * a % MOD;\\\",\\n      \\\"      b >>= 1;\\\",\\n      \\\"   }\\\",\\n      \\\"   return x;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"namespace linear_seq {\\\",\\n      \\\"   inline vector<int> BM(vector<int> x) {\\\",\\n      \\\"      // ls: (shortest) relation sequence (after filling zeroes) so far\\\",\\n      \\\"      // cur: current relation sequence\\\",\\n      \\\"      vector<int> ls, cur;\\\",\\n      \\\"      // lf: the position of ls (t')\\\",\\n      \\\"      // ld: delta of ls (v')\\\",\\n      \\\"      int lf, ld;\\\",\\n      \\\"      for (int i = 0; i < int(x.size()); ++i) {\\\",\\n      \\\"         ll t = 0;\\\",\\n      \\\"         // evaluate at position i\\\",\\n      \\\"         for (int j = 0; j < int(cur.size()); ++j)\\\",\\n      \\\"            t = (t + x[i - j - 1] * (ll)cur[j]) % MOD;\\\",\\n      \\\"         if ((t - x[i]) % MOD == 0)\\\",\\n      \\\"            continue; // good so far\\\",\\n      \\\"         // first non-zero position\\\",\\n      \\\"         if (!cur.size()) {\\\",\\n      \\\"            cur.resize(i + 1);\\\",\\n      \\\"            lf = i;\\\",\\n      \\\"            ld = (t - x[i]) % MOD;\\\",\\n      \\\"            continue;\\\",\\n      \\\"         }\\\",\\n      \\\"         // cur=cur-c/ld*(x[i]-t)\\\",\\n      \\\"         ll k = -(x[i] - t) * qp(ld, MOD - 2) % MOD /*1/ld*/;\\\",\\n      \\\"         vector<int> c(i - lf - 1); // add zeroes in front\\\",\\n      \\\"         c.push_back(k);\\\",\\n      \\\"         for (int j = 0; j < int(ls.size()); ++j)\\\",\\n      \\\"            c.push_back(-ls[j] * k % MOD);\\\",\\n      \\\"         if (c.size() < cur.size())\\\",\\n      \\\"            c.resize(cur.size());\\\",\\n      \\\"         for (int j = 0; j < int(cur.size()); ++j)\\\",\\n      \\\"            c[j] = (c[j] + cur[j]) % MOD;\\\",\\n      \\\"         // if cur is better than ls, change ls to cur\\\",\\n      \\\"         if (i - lf + (int)ls.size() >= (int)cur.size())\\\",\\n      \\\"            ls = cur, lf = i, ld = (t - x[i]) % MOD;\\\",\\n      \\\"         cur = c;\\\",\\n      \\\"      }\\\",\\n      \\\"      for (int i = 0; i < int(cur.size()); ++i)\\\",\\n      \\\"         cur[i] = (cur[i] % MOD + MOD) % MOD;\\\",\\n      \\\"      return cur;\\\",\\n      \\\"   }\\\",\\n      \\\"   int m; // length of recurrence\\\",\\n      \\\"   // a: first terms\\\",\\n      \\\"   // h: relation\\\",\\n      \\\"   ll a[SZ], h[SZ], t_[SZ], s[SZ], t[SZ];\\\",\\n      \\\"   // calculate p*q mod f\\\",\\n      \\\"   inline void mull(ll *p, ll *q) {\\\",\\n      \\\"      for (int i = 0; i < m + m; ++i)\\\",\\n      \\\"         t_[i] = 0;\\\",\\n      \\\"      for (int i = 0; i < m; ++i)\\\",\\n      \\\"         if (p[i])\\\",\\n      \\\"            for (int j = 0; j < m; ++j)\\\",\\n      \\\"               t_[i + j] = (t_[i 
+ j] + p[i] * q[j]) % MOD;\\\",\\n      \\\"      for (int i = m + m - 1; i >= m; --i)\\\",\\n      \\\"         if (t_[i])\\\",\\n      \\\"            // miuns t_[i]x^{i-m}(x^m-\\\\\\\\sum_{j=0}^{m-1} x^{m-j-1}h_j)\\\",\\n      \\\"            for (int j = m - 1; ~j; --j)\\\",\\n      \\\"               t_[i - j - 1] = (t_[i - j - 1] + t_[i] * h[j]) % MOD;\\\",\\n      \\\"      for (int i = 0; i < m; ++i)\\\",\\n      \\\"         p[i] = t_[i];\\\",\\n      \\\"   }\\\",\\n      \\\"   inline ll calc(ll K) {\\\",\\n      \\\"      for (int i = m; ~i; --i)\\\",\\n      \\\"         s[i] = t[i] = 0;\\\",\\n      \\\"      // init\\\",\\n      \\\"      s[0] = 1;\\\",\\n      \\\"      if (m != 1)\\\",\\n      \\\"         t[1] = 1;\\\",\\n      \\\"      else\\\",\\n      \\\"         t[0] = h[0];\\\",\\n      \\\"      // binary-exponentiation\\\",\\n      \\\"      while (K) {\\\",\\n      \\\"         if (K & 1)\\\",\\n      \\\"            mull(s, t);\\\",\\n      \\\"         mull(t, t);\\\",\\n      \\\"         K >>= 1;\\\",\\n      \\\"      }\\\",\\n      \\\"      ll su = 0;\\\",\\n      \\\"      for (int i = 0; i < m; ++i)\\\",\\n      \\\"         su = (su + s[i] * a[i]) % MOD;\\\",\\n      \\\"      return (su % MOD + MOD) % MOD;\\\",\\n      \\\"   }\\\",\\n      \\\"   inline int work(vector<int> x, ll n) {\\\",\\n      \\\"      if (n < int(x.size()))\\\",\\n      \\\"         return x[n];\\\",\\n      \\\"      vector<int> v = BM(x);\\\",\\n      \\\"      m = v.size();\\\",\\n      \\\"      if (!m)\\\",\\n      \\\"         return 0;\\\",\\n      \\\"      cerr << \\\\\\\"m=\\\\\\\" << m << endl;\\\",\\n      \\\"      for (int i = 0; i < m; ++i)\\\",\\n      \\\"         h[i] = v[i], a[i] = x[i];\\\",\\n      \\\"      return calc(n);\\\",\\n      \\\"   }\\\",\\n      \\\"}\\\\n\\\",\\n      \\\"/* Now the solution to the problem begins */\\\",\\n      \\\"\\\",\\n      \\\"class ${TM_FILENAME_BASE} {\\\",\\n      \\\"public:\\\",\\n      \\\"\\\\tstatic const int N = int(1e6$2) + 10;\\\",\\n      \\\"\\\\tint a[N], n;\\\\n\\\",\\n      \\\"\\\\tvoid solve() {\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"};\\\\n\\\",\\n      \\\"int main() {\\\",\\n      \\\"\\\\tios::sync_with_stdio(false);\\\",\\n      \\\"\\\\tcin.tie(0); cout.tie(0);\\\",\\n      \\\"\\\\t${TM_FILENAME_BASE} cp;\\\",\\n      \\\"\\\\tint T = 1;\\\",\\n      \\\"\\\\tcin >> T;$1\\\",\\n      \\\"\\\\tfor (int nc = 1; nc <= T; nc++) {\\\",\\n      \\\"#ifdef LOCAL\\\",\\n      \\\"\\\\t\\\\tcout << \\\\\\\"Case #\\\\\\\" << nc << \\\\\\\": \\\\\\\";\\\",\\n      \\\"\\\\t\\\\tcp.solve();\\\",\\n      \\\"#else\\\",\\n      \\\"\\\\t\\\\tcp.solve();\\\",\\n      \\\"#endif\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"\\\\treturn 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla de Petr C++20\\\"\\n  }\\n}\",\"java.json\":\"{ // @author josuerom\\n  \\\"System.out.print()\\\": {\\n    \\\"prefix\\\": \\\"s\\\",\\n    \\\"body\\\": [\\n      \\\"System.out.print($1);\\\"\\n    ],\\n    \\\"description\\\": \\\"Standard data output\\\"\\n  },\\n  \\\"System.out.println()\\\": {\\n    \\\"prefix\\\": \\\"ss\\\",\\n    \\\"body\\\": [\\n      \\\"System.out.println($1);\\\"\\n    ],\\n    \\\"description\\\": \\\"Standard output with line break\\\"\\n  },\\n  \\\"System.out.prinf()\\\": {\\n    \\\"prefix\\\": \\\"sf\\\",\\n    \\\"body\\\": [\\n      \\\"System.out.printf(\\\\\\\"%$1\\\\\\\", $2);\\\"\\n    ],\\n    \\\"description\\\": \\\"Formatted standard output\\\"\\n  },\\n  \\\"System ternary operator\\\": {\\n    \\\"prefix\\\": \\\"sot\\\",\\n    \\\"body\\\": [\\n      \\\"System.out.println($1 ? $2 : $3);\\\"\\n    ],\\n  },\\n  \\\"System veredict Y/N\\\": {\\n    \\\"prefix\\\": \\\"sov\\\",\\n    \\\"body\\\": [\\n      \\\"System.out.println($1 ? \\\\\\\"YES\\\\\\\" : \\\\\\\"NO\\\\\\\");\\\"\\n    ],\\n  },\\n  \\\"pw.print()\\\": {\\n    \\\"prefix\\\": \\\"p\\\",\\n    \\\"body\\\": [\\n      \\\"io.print($1);\\\"\\n    ],\\n    \\\"description\\\": \\\"Print standard output\\\"\\n  },\\n  \\\"pw.println()\\\": {\\n    \\\"prefix\\\": \\\"pp\\\",\\n    \\\"body\\\": [\\n      \\\"io.println($1);\\\"\\n    ],\\n    \\\"description\\\": \\\"Println standard output\\\"\\n  },\\n  \\\"Print ternary operator\\\": {\\n    \\\"prefix\\\": \\\"ppt\\\",\\n    \\\"body\\\": [\\n      \\\"io.println($1 ? $2 : $3);\\\"\\n    ],\\n  },\\n  \\\"Print veredict Y/N\\\": {\\n    \\\"prefix\\\": \\\"ppv\\\",\\n    \\\"body\\\": [\\n      \\\"io.println($1 ? \\\\\\\"YES\\\\\\\" : \\\\\\\"NO\\\\\\\");\\\"\\n    ],\\n  },\\n  \\\"pw.printf()\\\": {\\n    \\\"prefix\\\": \\\"pf\\\",\\n    \\\"body\\\": [\\n      \\\"io.printf(\\\\\\\"%d$1\\\\\\\\n\\\\\\\", $2);\\\"\\n    ],\\n    \\\"description\\\": \\\"Printf with format\\\"\\n  },\\n  \\\"Return ternary operator\\\": {\\n    \\\"prefix\\\": \\\"aot\\\",\\n    \\\"body\\\": [\\n      \\\"${1:boolean} $2 = ($3) ? $4 : $5;\\\"\\n    ],\\n  },\\n  \\\"Scanner(System.in)\\\": {\\n    \\\"prefix\\\": \\\"sc\\\",\\n    \\\"body\\\": [\\n      \\\"Scanner sc = new Scanner(System.in);$1\\\"\\n    ],\\n    \\\"description\\\": \\\"Standard input using the Scanner method\\\"\\n  },\\n  \\\"main() method\\\": {\\n    \\\"prefix\\\": \\\"fm\\\",\\n    \\\"body\\\": [\\n      \\\"public static void main(String[] args) {\\\",\\n      \\\"\\\\t$1\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"This is the main method that java executes\\\"\\n  },\\n  \\\"solve() method\\\": {\\n    \\\"prefix\\\": \\\"fsol\\\",\\n    \\\"body\\\": [\\n      \\\"public static ${1:void} solve($2) {\\\",\\n      \\\"}\\\"\\n    ]\\n  },\\n  \\\"public static void nameMethod\\\": {\\n    \\\"prefix\\\": \\\"psv\\\",\\n    \\\"body\\\": [\\n      \\\"public static void ${1:nameMethod}($2) {\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Method I use most often\\\"\\n  },\\n  \\\"Method template\\\": {\\n    \\\"prefix\\\": \\\"funpre\\\",\\n    \\\"body\\\": [\\n      \\\"public static ${1:void} preCalculate($2) {\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Function preCalculate\\\"\\n  },\\n  \\\"try catch\\\": {\\n    \\\"prefix\\\": \\\"try\\\",\\n    \\\"body\\\": [\\n      \\\"try {\\\",\\n      \\\"\\\\t$1\\\",\\n      \\\"} catch (Exception$2 e) {\\\",\\n      \\\"\\\\te.printStackTrace();\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Methods for handling exceptions\\\"\\n  },\\n  \\\"if\\\": {\\n    \\\"prefix\\\": \\\"if\\\",\\n    \\\"body\\\": [\\n      \\\"if (${1:condition}) $2\\\"\\n    ],\\n  },\\n  \\\"else\\\": {\\n    \\\"prefix\\\": \\\"el\\\",\\n    \\\"body\\\": [\\n      \\\"else $2\\\",\\n    ],\\n  },\\n  \\\"else if ()\\\": {\\n    \\\"prefix\\\": \\\"eli\\\",\\n    \\\"body\\\": [\\n      \\\"else if ($1) $2\\\",\\n    ],\\n  },\\n  \\\"do while\\\": {\\n    \\\"prefix\\\": \\\"do\\\",\\n    \\\"body\\\": [\\n      \\\"do {\\\\n\\\\t$1\\\",\\n      \\\"} while ($2);\\\"\\n    ],\\n  },\\n  \\\"while\\\": {\\n    \\\"prefix\\\": \\\"wh\\\",\\n    \\\"body\\\": [\\n      \\\"while ($1) {\\\",\\n      \\\"}\\\"\\n    ],\\n  },\\n  \\\"for iterator\\\": {\\n    \\\"prefix\\\": \\\"fori\\\",\\n    \\\"body\\\": [\\n      \\\"for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) $3{\\\",\\n      \\\"}\\\"\\n    ],\\n  },\\n  \\\"for reverse iterator\\\": {\\n    \\\"prefix\\\": \\\"forr\\\",\\n    \\\"body\\\": [\\n      \\\"for (int ${1:i} = $2 - 1; ${1:i} >= 0; ${1:i}--) $3{\\\",\\n      \\\"}\\\"\\n    ],\\n  },\\n  \\\"for each\\\": {\\n    \\\"prefix\\\": \\\"fore\\\",\\n    \\\"body\\\": [\\n      \\\"for (${1:int} e : $2) ${3:System.out}.print(e + \\\\\\\" \\\\\\\");\\\",\\n      \\\"${3:System.out}.println();\\\"\\n    ],\\n  },\\n  \\\"Object creation\\\": {\\n    \\\"prefix\\\": \\\"obj\\\",\\n    \\\"body\\\": [\\n      \\\"${1:nameClass} ${2:name} = new ${1:nameConstructor}();\\\"\\n    ],\\n  },\\n  \\\"Constructor ()\\\": {\\n    \\\"prefix\\\": \\\"construct\\\",\\n    \\\"body\\\": [\\n      \\\"public ${TM_FILENAME_BASE}($1) {\\\",\\n      \\\"\\\\tthis.$2 = $2;\\\",\\n      \\\"}\\\"\\n    ],\\n  },\\n  \\\"import\\\": {\\n    \\\"prefix\\\": \\\"in\\\",\\n    \\\"body\\\": [\\n      \\\"import java.$1;\\\",\\n    ],\\n    \\\"description\\\": \\\"Import packages\\\"\\n  },\\n  \\\"JavaClass Template\\\": {\\n    \\\"prefix\\\": \\\"class\\\",\\n    \\\"body\\\": [\\n      \\\"public class ${TM_FILENAME_BASE} {\\\",\\n      \\\"\\\\t$1\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"JavaClass template\\\"\\n  },\\n  \\\"JavaMainClass Template\\\": {\\n    \\\"prefix\\\": \\\"mainclass\\\",\\n    \\\"body\\\": [\\n      \\\"public class ${TM_FILENAME_BASE} {\\\",\\n      \\\"\\\\tpublic static void main(String[] args) {\\\",\\n      \\\"\\\\t\\\\t$1\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"JavaMainClass template\\\"\\n  },\\n  \\\"Header\\\": {\\n    \\\"prefix\\\": \\\"author\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   author:  josuerom\\\",\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\"\\n    ],\\n    \\\"description\\\": \\\"Encabezado\\\"\\n  },\\n  \\\"Date\\\": {\\n    \\\"prefix\\\": \\\"date\\\",\\n    \\\"body\\\": [\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n    ],\\n    \\\"description\\\": \\\"Encabezado\\\"\\n  },\\n  \\\"Arrays.toString()\\\": {\\n    \\\"prefix\\\": \\\"tostr\\\",\\n    \\\"body\\\": [\\n      \\\"Arrays.toString($1)\\\"\\n    ],\\n  },\\n  \\\"Set static array\\\": {\\n    \\\"prefix\\\": \\\"arr\\\",\\n    \\\"body\\\": [\\n      \\\"${1:int}[] a$2 = new ${1:int}[MAX$3];\\\"\\n    ],\\n  },\\n  \\\"Read int\\\": {\\n    \\\"prefix\\\": \\\"ri\\\",\\n    \\\"body\\\": [\\n      \\\"
int $1 = io.nextInt();\\\"\\n    ],\\n  },\\n  \\\"Read Line\\\": {\\n    \\\"prefix\\\": \\\"rln\\\",\\n    \\\"body\\\": [\\n      \\\"String line = io.nextLine();\\\"\\n    ],\\n  },\\n  \\\"Read long\\\": {\\n    \\\"prefix\\\": \\\"rl\\\",\\n    \\\"body\\\": [\\n      \\\"long $1 = io.nextLong();\\\"\\n    ],\\n  },\\n  \\\"Read double\\\": {\\n    \\\"prefix\\\": \\\"rd\\\",\\n    \\\"body\\\": [\\n      \\\"double $1 = io.nextDouble();\\\"\\n    ],\\n  },\\n  \\\"Read int[] array\\\": {\\n    \\\"prefix\\\": \\\"rai\\\",\\n    \\\"body\\\": [\\n      \\\"int[] $1 = io.readArray($2);\\\"\\n    ],\\n  },\\n  \\\"Read char[] array\\\": {\\n    \\\"prefix\\\": \\\"rac\\\",\\n    \\\"body\\\": [\\n      \\\"char[] $2 = io.next().toCharArray();\\\"\\n    ],\\n  },\\n  \\\"Read long[] array\\\": {\\n    \\\"prefix\\\": \\\"ral\\\",\\n    \\\"body\\\": [\\n      \\\"long[] $2 = io.next().readArray();\\\"\\n    ],\\n  },\\n  \\\"Read double[] array\\\": {\\n    \\\"prefix\\\": \\\"rad\\\",\\n    \\\"body\\\": [\\n      \\\"double[] $2 = io.next().readArray();\\\"\\n    ],\\n  },\\n  \\\"Set constant int\\\": {\\n    \\\"prefix\\\": \\\"N\\\",\\n    \\\"body\\\": [\\n      \\\"static final int N = 1$1_000_000;\\\"\\n    ],\\n  },\\n  \\\"read test cases\\\": {\\n    \\\"prefix\\\": \\\"tt\\\",\\n    \\\"body\\\": [\\n      \\\"int tt = io.nextInt();\\\",\\n      \\\"while (tt-- > 0) solve(io);\\\",\\n    ],\\n  },\\n  \\\"no test cases\\\": {\\n    \\\"prefix\\\": \\\"nt\\\",\\n    \\\"body\\\": [\\n      \\\"solve(io);\\\"\\n    ],\\n  },\\n  \\\"style josuerom\\\": {\\n    \\\"prefix\\\": \\\"header\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\"   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█\\\",\\n      \\\"   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█\\\",\\n      \\\"   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n    ]\\n  },\\n  \\\"Codeforces template\\\": {\\n    \\\"prefix\\\": \\\"tem1\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   author:  josuerom\\\",\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n      \\\"import java.io.*;\\\",\\n      \\\"import java.util.*;\\\",\\n      \\\"import static java.lang.Math.*;\\\\n\\\",\\n      \\\"public class ${TM_FILENAME_BASE} {\\\",\\n      \\\"\\\\tpublic static void main(String[] args) {\\\",\\n      \\\"\\\\t\\\\ttry (FastReader io = new FastReader()) {\\\",\\n      \\\"\\\\t\\\\t\\\\tint tt = 1;\\\",\\n      \\\"\\\\t\\\\t\\\\t// tt = io.nextInt();$1\\\",\\n      \\\"\\\\t\\\\t\\\\twhile (tt-- > 0) solve(io);\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\tSystem.exit(0);\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\tpublic static void solve(FastReader io) {$2\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\tstatic class FastReader extends PrintWriter {\\\",\\n      \\\"\\\\t\\\\tprivate BufferedReader br;\\\",\\n      \\\"\\\\t\\\\tprivate StringTokenizer st;\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic FastReader() {\\\",\\n      \\\"\\\\t\\\\t\\\\tthis(System.in, System.out);\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic FastReader(InputStream i, OutputStream o) {\\\",\\n      \\\"\\\\t\\\\t\\\\tsuper(o);\\\",\\n      \\\"\\\\t\\\\t\\\\tbr = new BufferedReader(new InputStreamReader(i));\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic FastReader(String idFile) throws IOException {\\\",\\n      \\\"\\\\t\\\\t\\\\tsuper(\\\\\\\"samples/output.out\\\\\\\");\\\",\\n      \\\"\\\\t\\\\t\\\\tbr = new BufferedReader(new FileReader(\\\\\\\"samples/\\\\\\\" + idFile));\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic String next() {\\\",\\n      \\\"\\\\t\\\\t\\\\ttry {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\twhile (st == null || !st.hasMoreTokens())\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\t\\\\tst = new StringTokenizer(br.readLine());\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\treturn st.nextToken();\\\",\\n      \\\"\\\\t\\\\t\\\\t} catch (Exception e) {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\te.printStackTrace();\\\",\\n      \\\"\\\\t\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\t\\\\treturn null;\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic String nextLine() {\\\",\\n      \\\"\\\\t\\\\t\\\\tString line = null;\\\",\\n      \\\"\\\\t\\\\t\\\\ttry {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\tline = br.readLine();\\\",\\n      \\\"\\\\t\\\\t\\\\t} catch (IOException e) {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\te.printStackTrace();\\\",\\n      \\\"\\\\t\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\t\\\\treturn line;\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic int nextInt() {\\\",\\n      \\\"\\\\t\\\\t\\\\treturn Integer.parseInt(next());\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic long nextLong() {\\\",\\n      \\\"\\\\t\\\\t\\\\treturn Long.parseLong(next());\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic double nextDouble() {\\\",\\n      \\\"\\\\t\\\\t\\\\treturn Double.parseDouble(next());\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic int[] readArray(int n) {\\\",\\n      \\\"\\\\t\\\\t\\\\tint[] a = new int[n];\\\",\\n      \\\"\\\\t\\\\t\\\\tfor (int i = 0; i < n; i++) {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\ta[i] = nextInt();\\\",\\n      \\\"\\\\t\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\t\\\\treturn a;\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla efectiva y efizaz\\\"\\n  },\\n  \\\"Ultra ligth template\\\": {\\n    \\\"prefix\\\": \\\"tem2\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\"   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█\\\",\\n      \\\"   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█\\\",\\n      \\\"   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n      \\\"import java.util.*;\\\\n\\\",\\n      \\\"public class ${TM_FILENAME_BASE} {\\\",\\n      \\\"\\\\tpublic static void main(String[] args) {\\\",\\n      \\\"\\\\t\\\\tScanner sc = new Scanner(System.in);\\\",\\n      \\\"\\\\t\\\\t$1\\\",\\n      \\\"\\\\t\\\\tSystem.exit(0);\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla estandar simple\\\"\\n  },\\n  \\\"2 Bits() template\\\": {\\n    \\\"prefix\\\": \\\"tem3\\\",\\n    \\\"body\\\": [\\n      \\\"/**\\\",\\n      \\\" *   █▀█  █▀▀▄ ─▀─ ▀▀█▀▀ █▀▀ ▄▀ ▀▄\\\",\\n      \\\" *   ─▄▀  █▀▀▄ ▀█▀ ──█── ▀▀█ █─ ─█\\\",\\n      \\\" *   █▄▄  ▀▀▀─ ▀▀▀ ──▀── ▀▀▀ ▀▄ ▄▀\\\",\\n      \\\" *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n      \\\"**/\\\",\\n      \\\"import java.io.*;\\\",\\n      \\\"import java.util.*;\\\",\\n      \\\"import static java.lang.Math.*;\\\\n\\\",\\n      \\\"public class ${TM_FILENAME_BASE} {\\\",\\n      \\\"\\\\tpublic static void main(String[] args) {\\\",\\n      \\\"\\\\t\\\\ttry (FastReader io = new FastReader()) {\\\",\\n      \\\"\\\\t\\\\t\\\\tint tt = 1;\\\",\\n      \\\"\\\\t\\\\t\\\\t// tt = io.nextInt();$1\\\",\\n      \\\"\\\\t\\\\t\\\\twhile (tt-- > 0) solve(io);\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\tSystem.exit(0);\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\tpublic static void solve(FastReader io) {$2\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\tstatic class FastReader extends PrintWriter {\\\",\\n      \\\"\\\\t\\\\tprivate BufferedReader br;\\\",\\n      \\\"\\\\t\\\\tprivate StringTokenizer st;\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic FastReader() {\\\",\\n      \\\"\\\\t\\\\t\\\\tthis(System.in, System.out);\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic FastReader(InputStream i, OutputStream o) {\\\",\\n      \\\"\\\\t\\\\t\\\\tsuper(o);\\\",\\n      \\\"\\\\t\\\\t\\\\tbr = new BufferedReader(new InputStreamReader(i));\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic FastReader(String idFile) throws IOException {\\\",\\n      \\\"\\\\t\\\\t\\\\tsuper(\\\\\\\"samples/output.out\\\\\\\");\\\",\\n      \\\"\\\\t\\\\t\\\\tbr = new BufferedReader(new FileReader(\\\\\\\"samples/\\\\\\\" + idFile));\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic String next() {\\\",\\n      \\\"\\\\t\\\\t\\\\ttry {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\twhile (st == null || !st.hasMoreTokens())\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\t\\\\tst = new StringTokenizer(br.readLine());\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\treturn st.nextToken();\\\",\\n      \\\"\\\\t\\\\t\\\\t} catch (Exception e) {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\te.printStackTrace();\\\",\\n      \\\"\\\\t\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\t\\\\treturn null;\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic String nextLine() {\\\",\\n      \\\"\\\\t\\\\t\\\\tString line = null;\\\",\\n      \\\"\\\\t\\\\t\\\\ttry {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\tline = br.readLine();\\\",\\n      \\\"\\\\t\\\\t\\\\t} catch (IOException e) {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\te.printStackTrace();\\\",\\n      \\\"\\\\t\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\t\\\\treturn line;\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic int nextInt() {\\\",\\n      \\\"\\\\t\\\\t\\\\treturn Integer.parseInt(next());\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic long nextLong() {\\\",\\n      \\\"\\\\t\\\\t\\\\treturn Long.parseLong(next());\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic double 
nextDouble() {\\\",\\n      \\\"\\\\t\\\\t\\\\treturn Double.parseDouble(next());\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\",\\n      \\\"\\\\t\\\\tpublic int[] readArray(int n) {\\\",\\n      \\\"\\\\t\\\\t\\\\tint[] a = new int[n];\\\",\\n      \\\"\\\\t\\\\t\\\\tfor (int i = 0; i < n; i++) {\\\",\\n      \\\"\\\\t\\\\t\\\\t\\\\ta[i] = nextInt();\\\",\\n      \\\"\\\\t\\\\t\\\\t}\\\",\\n      \\\"\\\\t\\\\t\\\\treturn a;\\\",\\n      \\\"\\\\t\\\\t}\\\",\\n      \\\"\\\\t}\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Plantilla equipo 2 Bits()\\\"\\n  }\\n}\",\"python.json\":\"{ // @author josuerom\\n  \\\"read int\\\": {\\n  \\\"prefix\\\": \\\"rint\\\",\\n  \\\"body\\\": [\\n    \\\"${1:n} = int(input())\\\"\\n  ],\\n  },\\n  \\\"read str\\\": {\\n  \\\"prefix\\\": \\\"rstr\\\",\\n  \\\"body\\\": [\\n   \\\"${1:s} = input()\\\"\\n  ],\\n  },\\n  \\\"read decimal\\\": {\\n  \\\"prefix\\\": \\\"rfloat\\\",\\n  \\\"body\\\": [\\n    \\\"${1:d} = float(input())\\\"\\n  ],\\n  },\\n  \\\"read list of str\\\": {\\n  \\\"prefix\\\": \\\"rls\\\",\\n  \\\"body\\\": [\\n    \\\"ls = input().split(\\\\\\\" \\\\\\\")\\\"\\n  ],\\n  },\\n  \\\"read list of int\\\": {\\n  \\\"prefix\\\": \\\"rli\\\",\\n  \\\"body\\\": [\\n    \\\"li$1 = map(int, input().split())\\\"\\n  ],\\n  },\\n  \\\"read list of float\\\": {\\n  \\\"prefix\\\": \\\"rlf\\\",\\n  \\\"body\\\": [\\n    \\\"lf$1 = map(float, input().split())\\\"\\n  ],\\n  },\\n  \\\"read list of chars\\\": {\\n  \\\"prefix\\\": \\\"rlc\\\",\\n  \\\"body\\\": [\\n    \\\"lc$1 = input().split(\\\\\\\"\\\\\\\")\\\"\\n  ],\\n  },\\n  \\\"return False\\\": {\\n  \\\"prefix\\\": \\\"rtf\\\",\\n  \\\"body\\\": [\\n    \\\"return False\\\"\\n  ],\\n  },\\n  \\\"return True\\\": {\\n  \\\"prefix\\\": \\\"rtt\\\",\\n  \\\"body\\\": [\\n    \\\"return True\\\"\\n  ],\\n  },\\n  \\\"read test case 1\\\": {\\n  \\\"prefix\\\": \\\"tc\\\",\\n  \\\"body\\\": [\\n    \\\"tc = int(input())\\\",\\n    \\\"while tc > 0:\\\",\\n    \\\"\\\\t$1\\\",\\n    \\\"\\\\ttc -= 1\\\"\\n  ],\\n  },\\n  \\\"read test case 2\\\": {\\n  \\\"prefix\\\": \\\"tt\\\",\\n  \\\"body\\\": [\\n    \\\"tt = int(input())\\\",\\n    \\\"while tt > 0:\\\",\\n    \\\"\\\\tsolve()\\\",\\n    \\\"\\\\ttt -= 1\\\"\\n  ],\\n  },\\n  \\\"comment block\\\": {\\n  \\\"prefix\\\": \\\"cb\\\",\\n  \\\"body\\\": [\\n    \\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\",\\n    \\\"$1\\\",\\n    \\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\"\\n  ],\\n  },\\n  \\\"print(normal)\\\": {\\n  \\\"prefix\\\": \\\"p\\\",\\n  \\\"body\\\": [\\n    \\\"print($1)\\\"\\n  ],\\n  },\\n  \\\"print(f-string)\\\": {\\n  \\\"prefix\\\": \\\"pp\\\",\\n  \\\"body\\\": [\\n    \\\"print(f\\\\\\\"$1\\\\\\\")\\\"\\n  ],\\n  },\\n  \\\"print(ternary operator)\\\": {\\n  \\\"prefix\\\": \\\"po\\\",\\n  \\\"body\\\": [\\n    \\\"print($2 if $1 else $3)\\\"\\n  ],\\n  },\\n  \\\"print(veredict YES or NO)\\\": {\\n  \\\"prefix\\\": \\\"pv\\\",\\n  \\\"body\\\": [\\n    \\\"print(\\\\\\\"YES\\\\\\\" if $1 else \\\\\\\"NO\\\\\\\")\\\"\\n  ],\\n  },\\n  \\\"ifel\\\": {\\n  \\\"prefix\\\": \\\"ifel\\\",\\n  \\\"body\\\": [\\n    \\\"if $1:\\\",\\n    \\\"\\\\t\\\",\\n    \\\"else:\\\",\\n    \\\"\\\\t\\\"\\n  ],\\n  },\\n  \\\"fori\\\": {\\n  \\\"prefix\\\": \\\"fori\\\",\\n  \\\"body\\\": [\\n    \\\"for ${1:i} in range(0, $2):\\\",\\n    \\\"\\\\t$3\\\"\\n  ],\\n  },\\n  \\\"fore\\\": {\\n  \\\"prefix\\\": \\\"fore\\\",\\n  \\\"body\\\": [\\n    \\\"for e in enumerate(${1:list}):\\\",\\n    \\\"\\\\t$2\\\"\\n  ],\\n  },\\n  \\\"while\\\": {\\n  \\\"prefix\\\": \\\"wh\\\",\\n  \\\"body\\\": [\\n    \\\"while $1:\\\",\\n    \\\"\\\\t$2\\\"\\n  ],\\n  },\\n  \\\"File header\\\": {\\n  \\\"prefix\\\": \\\"header\\\",\\n  \\\"body\\\": [\\n    \\\"#  author: josuerom - created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n  ],\\n  },\\n  \\\"template 1 cp\\\": {\\n  \\\"prefix\\\": \\\"tem1\\\",\\n  \\\"body\\\": [\\n    \\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\",\\n    \\\"   author:  josuerom\\\",\\n    \\\"   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n    \\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\",\\n    \\\"import sys\\\\n\\\",\\n    \\\"def rli(): return list(map(int, sys.stdin.readline().split()))\\\",\\n    \\\"def rls(): return list(map(str, sys.stdin.readline().split(r\\\\\\\"\\\\\\\\s+\\\\\\\")))\\\",\\n    \\\"def rlc(): return sys.stdin.readline().strip()\\\",\\n    \\\"def rint(): return int(sys.stdin.readline())\\\",\\n    \\\"def pl(ls): print(' '.join(map(str, ls)))\\\",\\n    \\\"def plb(ls): print('\\\\\\\\n'.join(map(str, ls)))\\\\n\\\",\\n    \\\"for _ in range(${1:rint()}):\\\",\\n  ],\\n  },\\n  \\\"template 2 free\\\": {\\n  \\\"prefix\\\": \\\"tem2\\\",\\n  \\\"body\\\": [\\n    \\\"#  author: josuerom - created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\\\",\\n  \\\"$1\\\"\\n  ],\\n  },\\n  \\\"def precalculate()\\\": {\\n  \\\"prefix\\\": \\\"funpre\\\",\\n  \\\"body\\\": [\\n    \\\"def pre_calculate($1):\\\",\\n    \\\"\\\\t\\\"\\n  ],\\n  },\\n  \\\"def solve()\\\": {\\n  \\\"prefix\\\": \\\"fsol\\\",\\n  \\\"body\\\": [\\n    \\\"def solve():\\\",\\n    \\\"\\\\t$1\\\",\\n  ],\\n  },\\n  \\\"fun main()\\\": {\\n  \\\"prefix\\\": \\\"main\\\",\\n  \\\"body\\\": [\\n    \\\"if __name__ == '__main__':\\\",\\n    \\\"\\\\t$1\\\"\\n  ],\\n  },\\n}\"}}","extensions":"[{\"identifier\":{\"id\":\"divyanshuagrawal.competitive-programming-helper\",\"uuid\":\"28579c42-9973-4b79-9a1e-76431ea4bc1f\"},\"displayName\":\"Competitive Programming Helper (cph)\"},{\"identifier\":{\"id\":\"formulahendry.code-runner\",\"uuid\":\"a6a0c5b2-d078-4bf5-a9ee-4e37054414b3\"},\"displayName\":\"Code Runner\"},{\"identifier\":{\"id\":\"kevinrose.vsc-python-indent\",\"uuid\":\"f3cbfb84-b1e1-40ff-b70f-877253461260\"},\"displayName\":\"Python Indent\"},{\"identifier\":{\"id\":\"maurodesouza.vscode-simple-readme\",\"uuid\":\"9a7ae836-5cc6-44b5-bc90-6971c66a87ab\"},\"displayName\":\"Simple Readme\",\"disabled\":true},{\"identifier\":{\"id\":\"miguelsolorio.fluent-icons\",\"uuid\":\"41aac8eb-b4f4-408d-9708-320d033a17f8\"},\"displayName\":\"Fluent Icons\"},{\"identifier\":{\"id\":\"miguelsolorio.symbols\",\"uuid\":\"cb54c3b9-1c64-4c4a-8b5a-887270ffe4b6\"},\"displayName\":\"Symbols\"},{\"identifier\":{\"id\":\"ms-azuretools.vscode-docker\",\"uuid\":\"0479fc1c-3d67-49f9-b087-fb9069afe48f\"},\"displayName\":\"Docker\",\"disabled\":true},{\"identifier\":{\"id\":\"ms-python.debugpy\",\"uuid\":\"4bd5d2c9-9d65-401a-b0b2-7498d9f17615\"},\"displayName\":\"Python Debugger\"},{\"identifier\":{\"id\":\"ms-python.python\",\"uuid\":\"f1f59ae4-9318-4f3c-a9b5-81b2eaa5f8a5\"},\"displayName\":\"Python\"},{\"identifier\":{\"id\":\"ms-python.vscode-pylance\",\"uuid\":\"364d2426-116a-433a-a5d8-a5098dc3afbd\"},\"displayName\":\"Pylance\"},{\"identifier\":{\"id\":\"ms-vscode.cpptools\",\"uuid\":\"690b692e-e8a9-493f-b802-8089d50ac1b2\"},\"displayName\":\"C/C++\"},{\"identifier\":{\"id\":\"redhat.java\",\"uuid\":\"198a707e-28af-4e84-8610-6e2f628dd12d\"},\"displayName\":\"Language Support for Java(TM) by Red Hat\"}]","globalState":"{\"storage\":{\"workbench.panel.markers.hidden\":\"[{\\\"id\\\":\\\"workbench.panel.markers.view\\\",\\\"isHidden\\\":false}]\",\"workbench.panel.output.hidden\":\"[{\\\"id\\\":\\\"workbench.panel.output\\\",\\\"isHidden\\\":false}]\",\"terminal.hidden\":\"[{\\\"id\\\":\\\"terminal\\\",\\\"isHidden\\\":false}]\",\"workbench.explorer.views.state.hidden\":\"[{\\\"id\\\":\\\"outline\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"timeline\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.explorer.openEditorsView\\\",\\\"isHidden\\\":true},{\\\"id\\\":\\\"workbench.explorer.emptyView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"npm\\\",\\\"isHidden\\\":true},{\\\"id\\\":\\\"workbench.explorer.fileView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerContainers\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerImages\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerRegistries\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerNetworks\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerVolumes\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"vscode-docker.views.dockerContexts\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"vscode-docker.views.help\\\",\\\"isHidden\\\":false}]\",\"workbench.scm.views.state.hidden\":\"[{\\\"id\\\":\\\"workbench.scm.repositories\\\",\\\"isHidden\\\":true},{\\\"id\\\":\\\"workbench.scm\\\",\\\"isHidden\\\":false}]\",\"workbench.view.search.state.hidden\":\"[{\\\"id\\\":\\\"workbench.view.search\\\",\\\"isHidden\\\":false}]\",\"workbench.activityBar.location\":\"default\",\"workbench.activity.pinnedViewlets2\":\"[{\\\"id\\\":\\\"workbench.view.explorer\\\",\\\"pinned\\\":true,\\\"order\\\":0},{\\\"id\\\":\\\"workbench.view.search\\\",\\\"pinned\\\":true,\\\"order\\\":1},{\\\"id\\\":\\\"workbench.view.scm\\\",\\\"pinned\\\":true,\\\"order\\\":2},{\\\"id\\\":\\\"workbench.view.debug\\\",\\\"pinned\\\":true,\\\"order\\\":3},{\\\"id\\\":\\\"workbench.view.extensions\\\",\\\"pinned\\\":true,\\\"order\\\":4},{\\\"id\\\":\\\"workbench.view.remote\\\",\\\"pinned\\\":true,\\\"order\\\":4},{\\\"id\\\":\\\"workbench.view.extension.test\\\",\\\"pinned\\\":true,\\\"order\\\":6},{\\\"id\\\":\\\"workbench.view.extension.references-view\\\",\\\"pinned\\\":true,\\\"order\\\":7},{\\\"id\\\":\\\"workbench.view.extension.cph-judge-view-container\\\",\\\"pinned\\\":true,\\\"order\\\":8},{\\\"id\\\":\\\"workbench.panel.chatSidebar\\\",\\\"pinned\\\":true,\\\"order\\\":100},{\\\"id\\\":\\\"userDataProfiles\\\",\\\"pinned\\\":true},{\\\"id\\\":\\\"workbench.view.sync\\\",\\\"pinned\\\":true},{\\\"id\\\":\\\"workbench.view.editSessions\\\",\\\"pinned\\\":true}]\",\"workbench.panel.pinnedPanels\":\"[{\\\"id\\\":\\\"workbench.panel.markers\\\",\\\"pinned\\\":true,\\\"order\\\":0},{\\\"id\\\":
\\\"workbench.panel.output\\\",\\\"pinned\\\":true,\\\"order\\\":1},{\\\"id\\\":\\\"workbench.panel.repl\\\",\\\"pinned\\\":true,\\\"order\\\":2},{\\\"id\\\":\\\"terminal\\\",\\\"pinned\\\":true,\\\"order\\\":3},{\\\"id\\\":\\\"workbench.panel.testResults\\\",\\\"pinned\\\":true,\\\"order\\\":3},{\\\"id\\\":\\\"~remote.forwardedPortsContainer\\\",\\\"pinned\\\":true,\\\"order\\\":5},{\\\"id\\\":\\\"refactorPreview\\\",\\\"pinned\\\":true}]\",\"workbench.telemetryOptOutShown\":\"true\",\"workbench.panel.repl.hidden\":\"[{\\\"id\\\":\\\"workbench.panel.repl.view\\\",\\\"isHidden\\\":false}]\",\"workbench.view.debug.state.hidden\":\"[{\\\"id\\\":\\\"workbench.debug.welcome\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.debug.variablesView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.debug.watchExpressionsView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.debug.callStackView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.debug.loadedScriptsView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.debug.breakPointsView\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"jsBrowserBreakpoints\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"jsExcludedCallers\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"CppSshTargetsView\\\",\\\"isHidden\\\":false}]\",\"colorThemeData\":\"{\\\"id\\\":\\\"vs-dark vscode-theme-defaults-themes-dark_modern-json\\\",\\\"label\\\":\\\"Dark Modern\\\",\\\"settingsId\\\":\\\"Default Dark Modern\\\",\\\"themeTokenColors\\\":[{\\\"settings\\\":{\\\"foreground\\\":\\\"#D4D4D4\\\"},\\\"scope\\\":[\\\"meta.embedded\\\",\\\"source.groovy.embedded\\\",\\\"string meta.image.inline.markdown\\\",\\\"variable.legacy.builtin.python\\\"]},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"italic\\\"},\\\"scope\\\":\\\"emphasis\\\"},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"bold\\\"},\\\"scope\\\":\\\"strong\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#000080\\\"},\\\"scope\\\":\\\"header\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#6A9955\\\"},\\\"scope\\\":\\\"comment\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"constant.language\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#b5cea8\\\"},\\\"scope\\\":[\\\"constant.numeric\\\",\\\"variable.other.enummember\\\",\\\"keyword.operator.plus.exponent\\\",\\\"keyword.operator.minus.exponent\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#646695\\\"},\\\"scope\\\":\\\"constant.regexp\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"entity.name.tag\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d7ba7d\\\"},\\\"scope\\\":[\\\"entity.name.tag.css\\\",\\\"entity.name.tag.less\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#9cdcfe\\\"},\\\"scope\\\":\\\"entity.other.attribute-name\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d7ba7d\\\"},\\\"scope\\\":[\\\"entity.other.attribute-name.class.css\\\",\\\"source.css entity.other.attribute-name.class\\\",\\\"entity.other.attribute-name.id.css\\\",\\\"entity.other.attribute-name.parent-selector.css\\\",\\\"entity.other.attribute-name.parent.less\\\",\\\"source.css entity.other.attribute-name.pseudo-class\\\",\\\"entity.other.attribute-name.pseudo-element.css\\\",\\\"source.css.less entity.other.attribute-name.id\\\",\\\"entity.other.attribute-name.scss\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#f44747\\\"},\\\"scope\\\":\\\"invalid\\\"},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"underline\\\"},\\\"scope\\\":\\\"markup.underline\\\"},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"bold\\\",\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"markup.bold\\\"},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"bold\\\",\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"markup.heading\\\"},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"italic\\\"},\\\"scope\\\":\\\"markup.italic\\\"},{\\\"settings\\\":{\\\"fontStyle\\\":\\\"strikethrough\\\"},\\\"scope\\\":\\\"markup.strikethrough\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#b5cea8\\\"},\\\"scope\\\":\\\"markup.inserted\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#ce9178\\\"},\\\"scope\\\":\\\"markup.deleted\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"markup.changed\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#6A9955\\\"},\\\"scope\\\":\\\"punctuation.definition.quote.begin.markdown\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#6796e6\\\"},\\\"scope\\\":\\\"punctuation.definition.list.begin.markdown\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#ce9178\\\"},\\\"scope\\\":\\\"markup.inline.raw\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#808080\\\"},\\\"scope\\\":\\\"punctuation.definition.tag\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":[\\\"meta.preprocessor\\\",\\\"entity.name.function.preprocessor\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#ce9178\\\"},\\\"scope\\\":\\\"meta.preprocessor.string\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#b5cea8\\\"},\\\"scope\\\":\\\"meta.preprocessor.numeric\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#9cdcfe\\\"},\\\"scope\\\":\\\"meta.structure.dictionary.key.python\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"meta.diff.header\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"storage\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"storage.type\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":[\\\"storage.modifier\\\",\\\"keyword.operator.noexcept\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#ce9178\\\"},\\\"scope\\\":[\\\"string\\\",\\\"meta.embedded.assembly\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#ce9178\\\"},\\\"scope\\\":\\\"string.tag\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#ce9178\\\"},\\\"scope\\\":\\\"string.value\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d16969\\\"},\\\"scope\\\":\\\"string.regexp\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":[\\\"punctuation.definition.template-expression.begin\\\",\\\"punctuation.definition.template-expression.end\\\",\\\"punctuation.section.embedded\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d4d4d4\\\"},\\\"scope\\\":[\\\"meta.template.expression\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#9cdcfe\\\"},\\\"scope\\\":[\\\"support.type.vendored.property-name\\\",\\\"support.type.property-name\\\",\\\"source.css variable\\\",\\\"source.coffee.embedded\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"keyword\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"keyword.control\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d4d4d4\\\"},\\\"scope\\\":\\\"keyword.operator\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":[\\\"keyword.operator.new\\\",\\\"keyword.operator.expression\\\",\\\"keyword.operator.cast\\\",\\\"keyword.operator.sizeof\\\",\\\"keyword.operator.alignof\\\",\\\"keyword.operator.typeid\\\",\\\"keyword.operator.alignas\\\",\\\"keyword.operator.instanceof\\\",\\\"keyword.operator.logical.python\\\",\\\"keyword.operator.wordlike\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#b5cea8\\\"},\\\"scope\\\":\\\"keyword.other.unit\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":[\\\"punctuation.section.embedded.begin.php\\\",\\\"punctuation.section.embedded.end.php\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#9cdcfe\\\"},\\\"scope\\\":\\\"support.function.git-rebase\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#b5cea8\\\"},\\\"scope\\\":\\\"constant.sha.git-rebase\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d4d4d4\\\"},\\\"scope\\\":[\\\"storage.modifier.import.java\\\",\\\"variable.language.wildcard.java\\\",\\\"storage.modifier.package.java\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":\\\"variable.language\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#DCDCAA\\\"},\\\"scope\\\":[\\\"entity.name.function\\\",\\\"support.function\\\",\\\"support.constant.handlebars\\\",\\\"source.powershell variable.other.member\\\",\\\"entity.name.operator.custom-literal\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#4EC9B0\\\"},\\\"scope\\\":[\\\"support.class\\\",\\\"support.type\\\",\\\"entity.name.type\\\",\\\"entity.name.namespace\\\",\\\"entity.other.attribute\\\",\\\"entity.name.scope-resolution\\\",\\\"entity.name.class\\\",\\\"storage.type.numeric.go\\\",\\\"storage.type.byte.go\\\",\\\"storage.type.boolean.go\\\",\\\"storage.type.string.go\\\",\\\"storage.type.uintptr.go\\\",\\\"storage.type.error.go\\\",\\\"storage.type.rune.go\\\",\\\"storage.type.cs\\\",\\\"storage.type.generic.cs\\\",\\\"storage.type.modifier.cs\\\",\\\"storage.type.variable.cs\\\",\\\"storage.type.annotation.java\\\",\\\"storage.type.generic.java\\\",\\\"storage.type.java\\\",\\\"storage.type.object.array.java\\\",\\\"storage.type.primitive.array.java\\\",\\\"storage.type.primitive.java\\\",\\\"storage.type.token.java\\\",\\\"storage.type.groovy\\\",\\\"storage.type.annotation.groovy\\\",\\\"storage.type.parameters.groovy\\\",\\\"storage.type.generic.groovy\\\",\\\"storage.type.object.array.groovy\\\",\\\"storage.type.primitive.array.groovy\\\",\\\"storage.type.primitive.groovy\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#4EC9B0\\\"},\\\"scope\\\":[\\\"meta.type.cast.expr\\\",\\\"meta.type.new.expr\\\",\\\"support.constant.math\\\",\\\"support.constant.dom\\\",\\\"support.constant.json\\\",\\\"entity.other.inherited-class\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#C586C0\\\"},\\\"scope\\\":[\\\"keyword.control\\\",\\\"source.cpp keyword.operator.new\\\",\\\"keyword.operator.delete\\\",\\\"keyword.other.using\\\",\\\"keyword.other.directive.using\\\",\\\"keyword.other.operator\\\",\\\"entity.name.operator\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#9CDCFE\\\"},\\\"scope\\\":[\\\"variable\\\",\\\"meta.definition.variable.name\\\",\\\"support.variable\\\",\\\"entity.name.variable\\\",\\\"constant.other.placeholder\\\"]},{\\\"settings\\\
":{\\\"foreground\\\":\\\"#4FC1FF\\\"},\\\"scope\\\":[\\\"variable.other.constant\\\",\\\"variable.other.enummember\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#9CDCFE\\\"},\\\"scope\\\":[\\\"meta.object-literal.key\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#CE9178\\\"},\\\"scope\\\":[\\\"support.constant.property-value\\\",\\\"support.constant.font-name\\\",\\\"support.constant.media-type\\\",\\\"support.constant.media\\\",\\\"constant.other.color.rgb-value\\\",\\\"constant.other.rgb-value\\\",\\\"support.constant.color\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#CE9178\\\"},\\\"scope\\\":[\\\"punctuation.definition.group.regexp\\\",\\\"punctuation.definition.group.assertion.regexp\\\",\\\"punctuation.definition.character-class.regexp\\\",\\\"punctuation.character.set.begin.regexp\\\",\\\"punctuation.character.set.end.regexp\\\",\\\"keyword.operator.negation.regexp\\\",\\\"support.other.parenthesis.regexp\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d16969\\\"},\\\"scope\\\":[\\\"constant.character.character-class.regexp\\\",\\\"constant.other.character-class.set.regexp\\\",\\\"constant.other.character-class.regexp\\\",\\\"constant.character.set.regexp\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#DCDCAA\\\"},\\\"scope\\\":[\\\"keyword.operator.or.regexp\\\",\\\"keyword.control.anchor.regexp\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d7ba7d\\\"},\\\"scope\\\":\\\"keyword.operator.quantifier.regexp\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#569cd6\\\"},\\\"scope\\\":[\\\"constant.character\\\",\\\"constant.other.option\\\"]},{\\\"settings\\\":{\\\"foreground\\\":\\\"#d7ba7d\\\"},\\\"scope\\\":\\\"constant.character.escape\\\"},{\\\"settings\\\":{\\\"foreground\\\":\\\"#C8C8C8\\\"},\\\"scope\\\":\\\"entity.name.label\\\"}],\\\"semanticTokenRules\\\":[{\\\"_selector\\\":\\\"newOperator\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#d4d4d4\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"stringLiteral\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#ce9178\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"customLiteral\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#d4d4d4\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"numberLiteral\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#b5cea8\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"newOperator\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#c586c0\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"stringLiteral\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#ce9178\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"customLiteral\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#dcdcaa\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}},{\\\"_selector\\\":\\\"numberLiteral\\\",\\\"_style\\\":{\\\"_foreground\\\":\\\"#b5cea8\\\",\\\"_bold\\\":null,\\\"_underline\\\":null,\\\"_italic\\\":null,\\\"_strikethrough\\\":null}}],\\\"extensionData\\\":{\\\"_extensionId\\\":\\\"vscode.theme-defaults\\\",\\\"_extensionIsBuiltin\\\":true,\\\"_extensionName\\\":\\\"theme-defaults\\\",\\\"_extensionPublisher\\\":\\\"vscode\\\"},\\\"themeSemanticHighlighting\\\":true,\\\"colorMap\\\":{\\\"checkbox.border\\\":\\\"#3c3c3c\\\",\\\"editor.background\\\":\\\"#1f1f1f\\\",\\\"editor.foreground\\\":\\\"#cccccc\\\",\\\"editor.inactiveSelectionBackground\\\":\\\"#3a3d41\\\",\\\"editorIndentGuide.background1\\\":\\\"#404040\\\",\\\"editorIndentGuide.activeBackground1\\\":\\\"#707070\\\",\\\"editor.selectionHighlightBackground\\\":\\\"#add6ff26\\\",\\\"list.dropBackground\\\":\\\"#383b3d\\\",\\\"activityBarBadge.background\\\":\\\"#0078d4\\\",\\\"sideBarTitle.foreground\\\":\\\"#cccccc\\\",\\\"input.placeholderForeground\\\":\\\"#989898\\\",\\\"menu.background\\\":\\\"#1f1f1f\\\",\\\"menu.foreground\\\":\\\"#cccccc\\\",\\\"menu.separatorBackground\\\":\\\"#454545\\\",\\\"menu.border\\\":\\\"#454545\\\",\\\"statusBarItem.remoteForeground\\\":\\\"#ffffff\\\",\\\"statusBarItem.remoteBackground\\\":\\\"#0078d4\\\",\\\"ports.iconRunningProcessForeground\\\":\\\"#369432\\\",\\\"sideBarSectionHeader.background\\\":\\\"#181818\\\",\\\"sideBarSectionHeader.border\\\":\\\"#2b2b2b\\\",\\\"tab.lastPinnedBorder\\\":\\\"#cccccc33\\\",\\\"list.activeSelectionIconForeground\\\":\\\"#ffffff\\\",\\\"terminal.inactiveSelectionBackground\\\":\\\"#3a3d41\\\",\\\"widget.border\\\":\\\"#313131\\\",\\\"actionBar.toggledBackground\\\":\\\"#383a49\\\",\\\"activityBar.activeBorder\\\":\\\"#0078d4\\\",\\\"activityBar.background\\\":\\\"#181818\\\",\\\"activityBar.border\\\":\\\"#2b2b2b\\\",\\\"activityBar.foreground\\\":\\\"#d7d7d7\\\",\\\"activityBar.inactiveForeground\\\":\\\"#868686\\\",\\\"activityBarBadge.foreground\\\":\\\"#ffffff\\\",\\\"badge.background\\\":\\\"#616161\\\",\\\"badge.foreground\\\":\\\"#f8f8f8\\\",\\\"button.background\\\":\\\"#0078d4\\\",\\\"button.border\\\":\\\"#ffffff12\\\",\\\"button.foreground\\\":\\\"#ffffff\\\",\\\"button.hoverBackground\\\":\\\"#026ec1\\\",\\\"button.secondaryBackground\\\":\\\"#313131\\\",\\\"button.secondaryForeground\\\":\\\"#cccccc\\\",\\\"button.secondaryHoverBackground\\\":\\\"#3c3c3c\\\",\\\"chat.slashCommandBackground\\\":\\\"#34414b\\\",\\\"chat.slashCommandForeground\\\":\\\"#40a6ff\\\",\\\"checkbox.background\\\":\\\"#313131\\\",\\\"debugToolBar.background\\\":\\\"#181818\\\",\\\"descriptionForeground\\\":\\\"#9d9d9d\\\",\\\"dropdown.background\\\":\\\"#313131\\\",\\\"dropdown.border\\\":\\\"#3c3c3c\\\",\\\"dropdown.foreground\\\":\\\"#cccccc\\\",\\\"dropdown.listBackground\\\":\\\"#1f1f1f\\\",\\\"editor.findMatchBackground\\\":\\\"#9e6a03\\\",\\\"editorGroup.border\\\":\\\"#ffffff17\\\",\\\"editorGroupHeader.tabsBackground\\\":\\\"#181818\\\",\\\"editorGroupHeader.tabsBorder\\\":\\\"#2b2b2b\\\",\\\"editorGutter.addedBackground\\\":\\\"#2ea043\\\",\\\"editorGutter.deletedBackground\\\":\\\"#f85149\\\",\\\"editorGutter.modifiedBackground\\\":\\\"#0078d4\\\",\\\"editorLineNumber.activeForeground\\\":\\\"#cccccc\\\",\\\"editorLineNumber.foreground\\\":\\\"#6e7681\\\",\\\"editorOverviewRuler.border\\\":\\\"#010409\\\",\\\"editorWidget.background\\\":\\\"#202020\\\",\\\"errorForeground\\\":\\\"#f85149\\\",\\\"focusBorder\\\":\\\"#0078d4\\\",\\\"foreground\\\":\\\"#cccccc\\\",\\\"icon.foreground\\\":\\\"#cccccc\\\",\\\"input.background\\\":\\\"#313131\\\",\\\"input.border\\\":\\\"#3c3c3c\\\",\\\"input.foreground\\\":\\\"#cccccc\\\",\\\"inputOption.activeBackground\\\":\\\"#2489db82\\\",\\\"inputOption.activeBorder\\\":\\\"#2488db\\\",\\\"keybindingLabel.foreground\\\":\\\"#cccccc\\\",\\\"notificationCenterHeader.background\\\":\\\"#1f1f1f\\\",\\\"notificationCenterHeader.foreground\\\":\\\"#cccccc\\\",\\\"notifications.background\\\":\\\"#1f1f1f\\\",\\\"notifications.border\\\":\\\"#2b2b2b\\\",\\\"notifications.foreground\\\":\\\"#cccccc\\\",\\\"panel.background\\\":\\\"#181818\\\",\\\"panel.border\\\":\\\"#2b2b2b\\\",\\\"panelInput.border\\\":\\\"#2b2b2b\\\",\\\"panelTitle.activeBorder\\\":\\\"#0078d4\\\",\\\"panelTitle.activeForeground\\\":\\\"#cccccc\\\",\\\"panelTitle.inactiveForeground\\\":\\\"#9d9d9d\\\",\\\"peekViewEditor.background\\\":\\\"#1f1f1f\\\",\\\"peekViewEditor.matchHighlightBackground\\\":\\\"#bb800966\\\",\\\"peekViewResult.background\\\":\\\"#1f1f1f\\\",\\\"peekViewResult.matchHighlightBackground\\\":\\\"#bb800966\\\",\\\"pickerGroup.border\\\":\\\"#3c3c3c\\\",\\\"progressBar.background\\\":\\\"#0078d4\\\",\\\"quickInput.background\\\":\\\"#222222\\\",\\\"quickInput.foreground\\\":\\\"#cccccc\\\",\\\"settings.dropdownBackground\\\":\\\"#313131\\\",\\\"settings.dropdownBorder\\\":\\\"#3c3c3c\\\",\\\"settings.headerForeground\\\":\\\"#ffffff\\\",\\\"settings.modifiedItemIndicator\\\":\\\"#bb800966\\\",\\\"sideBar.background\\\":\\\"#181818\\\",\\\"sideBar.border\\\":\\\"#2b2b2b\\\",\\\"sideBar.foreground\\\":\\\"#cccccc\\\",\\\"sideBarSectionHeader.foreground\\\":\\\"#cccccc\\\",\\\"statusBar.background\\\":\\\"#181818\\\",\\\"statusBar.border\\\":\\\"#2b2b2b\\\",\\\"statusBar.debuggingBackground\\\":\\\"#0078d4\\\",\\\"statusBar.debuggingForeground\\\":\\\"#ffffff\\\",\\\"statusBar.focusBorder\\\":\\\"#0078d4\\\",\\\"statusBar.foreground\\\":\\\"#cccccc\\\",\\\"statusBar.noFolderBackground\\\":\\\"#1f1f1f\\\",\\\"statusBarItem.focusBorder\\\":\\\"#0078d4\\\",\\\"statusBarItem.prominentBackground\\\":\\\"#6e768166\\\",\\\"tab.activeBackground\\\":\\\"#1f1f1f\\\",\\\"tab.activeBorder\\\":\\\"#1f1f1f\\\",\\\"tab.activeBorderTop\\\":\\\"#0078d4\\\",\\\"tab.activeForeground\\\":\\\"#ffffff\\\",\\\"tab.border\\\":\\\"#2b2b2b\\\",\\\"tab.hoverBackground\\\":\\\"#1f1f1f\\\",\\\"tab.inactiveBackground\\\":\\\"#181818\\\",\\\"tab.inactiveForeground\\\":\\\"#9d9d9d\\\",\\\"tab.unfocusedActiveBorder\\\":\\\"#1f1f1f\\\",\\\"tab.unfocusedActiveBorderTop\\\":\\\"#2b2b2b\\\",\\\"tab.unfocusedHoverBackground\\\":\\\"#1f1f1f\\\",\\\"terminal.foreground\\\":\\\"#cccccc\\\",\\\"terminal.tab.activeBorder\\\":\\\"#0078d4\\\",\\\"textBlockQuote.background\\\":\\\"#2b2b2b\\\",\\\"textBlockQuote.border\\\":\\\"#616161\\\",\\\"textCodeBlock.background\\\":\\\"#2b2b2b\\\",\\\"textLink.activeForeground\\\":\\\"#4daafc\\\",\\\"textLink.foreground\\\":\\\"#4daafc\\\",\\\"textPreformat.foreground\\\":\\\"#d0d0d0\\\",\\\"textPreformat.background\\\":\\\"#3c3c3c\\\",\\\"textSeparator.foreground\\\":\\\"#21262d\\\",\\\"titleBar.activeBackground\\\":\\\"#181818\\\",\\\"titleBar.activeForeground\\\":\\\"#cccccc\\\",\\\"titleBar.border\\\":\\\"#2b2b2b\\\",\\\"titleBar.inactiveBackground\\\":\\\"#1f1f1f\\\",\\\"titleBar.inactiveForeground\\\":\\\"#9d9d9d\\\",\\\"welcomePage.tileBackground\\\":\\\"#
2b2b2b\\\",\\\"welcomePage.progress.foreground\\\":\\\"#0078d4\\\"},\\\"watch\\\":false}\",\"memento/gettingStartedService\":\"{\\\"installGit\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#awaiting.activation.linux\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#verify.compiler.mac\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#verify.compiler.linux\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#verify.compiler.windows\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#verify.compiler.windows10\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#verify.compiler.windows11\\\":{\\\"done\\\":true},\\\"commandPaletteTask\\\":{\\\"done\\\":true},\\\"commandPaletteTaskWeb\\\":{\\\"done\\\":true},\\\"pickColorTheme\\\":{\\\"done\\\":true},\\\"pickColorThemeWeb\\\":{\\\"done\\\":true},\\\"quickOpen\\\":{\\\"done\\\":true},\\\"quickOpenWeb\\\":{\\\"done\\\":true},\\\"terminal\\\":{\\\"done\\\":true},\\\"ms-python.python#pythonWelcome#python.createPythonFile\\\":{\\\"done\\\":true},\\\"ms-python.python#pythonWelcome2#python.createPythonFile\\\":{\\\"done\\\":true},\\\"ms-vscode.cpptools#cppWelcome#create.cpp.file\\\":{\\\"done\\\":true}}\",\"encryption.migratedToGnomeLibsecret\":\"true\",\"themeUpdatedNotificationShown\":\"true\",\"workbench.view.extensions.state.hidden\":\"[{\\\"id\\\":\\\"workbench.views.extensions.installed\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchOutdated\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.workspaceRecommendations\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.popular\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchRecentlyUpdated\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.otherRecommendations\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"extensions.recommendedList\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.enabled\\\",\\\"isHidden\\\":true},{\\\"id\\\":\\\"workbench.views.extensions.disabled\\\",\\\"isHidden\\\":true},{\\\"id\\\":\\\"workbench.views.extensions.marketplace\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchInstalled\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchEnabled\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchDisabled\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchBuiltin\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.searchWorkspaceUnsupported\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.builtinFeatureExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.builtinThemeExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.builtinProgrammingLanguageExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.untrustedUnsupportedExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.untrustedPartiallySupportedExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.virtualUnsupportedExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.virtualPartiallySupportedExtensions\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.views.extensions.deprecatedExtensions\\\",\\\"isHidden\\\":false}]\",\"workbench.welcomePage.walkthroughMetadata\":\"[[\\\"ms-vscode.cpptools#cppWelcome\\\",{\\\"firstSeen\\\":1712720820969,\\\"stepIDs\\\":[\\\"awaiting.activation.mac\\\",\\\"awaiting.activation.linux\\\",\\\"awaiting.activation.windows\\\",\\\"awaiting.activation.windows10\\\",\\\"awaiting.activation.windows11\\\",\\\"no.compilers.found.mac\\\",\\\"no.compilers.found.linux\\\",\\\"no.compilers.found.windows\\\",\\\"no.compilers.found.windows10\\\",\\\"no.compilers.found.windows11\\\",\\\"verify.compiler.mac\\\",\\\"verify.compiler.linux\\\",\\\"verify.compiler.windows\\\",\\\"verify.compiler.windows10\\\",\\\"verify.compiler.windows11\\\",\\\"create.cpp.file\\\",\\\"relaunch.developer.command.prompt.windows\\\",\\\"run.project.mac\\\",\\\"run.project.linux\\\",\\\"run.project.windows\\\",\\\"customize.debugging.linux\\\",\\\"customize.debugging.windows\\\",\\\"customize.debugging.mac\\\"],\\\"manaullyOpened\\\":false}],[\\\"ms-python.python#pythonWelcome\\\",{\\\"firstSeen\\\":1712720824030,\\\"stepIDs\\\":[\\\"python.createPythonFile\\\",\\\"python.installPythonWin8\\\",\\\"python.installPythonMac\\\",\\\"python.installPythonLinux\\\",\\\"python.selectInterpreter\\\",\\\"python.createEnvironment\\\",\\\"python.runAndDebug\\\",\\\"python.learnMoreWithDS\\\"],\\\"manaullyOpened\\\":false}],[\\\"ms-python.python#pythonWelcome2\\\",{\\\"firstSeen\\\":1712720824030,\\\"stepIDs\\\":[\\\"python.createPythonFile\\\",\\\"python.installPythonWin8\\\",\\\"python.installPythonMac\\\",\\\"python.installPythonLinux\\\",\\\"python.createEnvironment2\\\",\\\"python.runAndDebug2\\\",\\\"python.learnMoreWithDS2\\\"],\\\"manaullyOpened\\\":false}],[\\\"ms-python.python#pythonDataScienceWelcome\\\",{\\\"firstSeen\\\":1712720824030,\\\"stepIDs\\\":[\\\"python.installJupyterExt\\\",\\\"python.createNewNotebook\\\",\\\"python.openInteractiveWindow\\\",\\\"python.dataScienceLearnMore\\\"],\\\"manaullyOpened\\\":false}],[\\\"ms-azuretools.vscode-docker#dockerStart\\\",{\\\"firstSeen\\\":1712852887751,\\\"stepIDs\\\":[\\\"openFolder\\\",\\\"openFolderMac\\\",\\\"scaffold\\\",\\\"buildImage\\\",\\\"runContainer\\\",\\\"dockerExplorer\\\",\\\"pushImage\\\",\\\"azDeploy\\\",\\\"learn\\\"],\\\"manaullyOpened\\\":false}]]\",\"workbench.view.extension.test.state.hidden\":\"[{\\\"id\\\":\\\"workbench.view.testing\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"workbench.view.testCoverage\\\",\\\"isHidden\\\":false}]\",\"workbench.view.extension.cph-judge-view-container.state.hidden\":\"[{\\\"id\\\":\\\"cph.judgeView\\\",\\\"isHidden\\\":false}]\",\"workbench.panel.alignment\":\"center\",\"commandPalette.mru.cache\":\"{\\\"usesLRU\\\":true,\\\"entries\\\":[{\\\"key\\\":\\\"workbench.action.openSettingsJson\\\",\\\"value\\\":1},{\\\"key\\\":\\\"workbench.action.openGlobalKeybindingsFile\\\",\\\"value\\\":2},{\\\"key\\\":\\\"vscode-compcalc.calc\\\",\\\"value\\\":11},{\\\"key\\\":\\\"editor.action.insertSnippet\\\",\\\"value\\\":12},{\\\"key\\\":\\\"workbench.action.reloadWindow\\\",\\\"value\\\":17},{\\\"key\\\":\\\"workbench.action.openSnippets\\\",\\\"value\\\":22},{\\\"key\\\":\\\"workbench.profiles.actions.exportProfile\\\",\\\"value\\\":24}]}\",\"commandPalette.mru.counter\":\"25\",\"nps/lastSessionDate\":\"Wed Apr 24 2024\",\"nps/sessionCount\":\"8\",\"ces/skipSurvey\":\"1.88.0\",\"cpp.1.lastSessionDate\":\"Wed Apr 24 2024\",\"cpp.1.sessionCount\":\"8\",\"java.2.lastSessionDate\":\"Wed Apr 24 2024\",\"java.2.sessionCount\":\"8\",\"javascript.1.lastSessionDate\":\"Wed Apr 24 2024\",\"javascript.1.sessionCount\":\"8\",\"typescript.1.lastSessionDate\":\"Wed Apr 24 2024\",\"typescript.1.sessionCount\":\"8\",\"csharp.1.lastSessionDate\":\"Wed Apr 24 2024\",\"csharp.1.sessionCount\":\"8\",\"snippets.usageTimestamps\":\"[[\\\"python.json/print(ternary operator)\\\",1712848987801],[\\\"snippets/graph/graph_basic.json/Disjoint Set Unions\\\",1712852997065],[\\\"snippets/basics/basics.json/Header files and macros and typedefs\\\",1712853028448],[\\\"snippets/basics/basics.json/Header files and macros and typedefs with test cases\\\",1712853131391],[\\\"snippets/cpp.code-snippets/Region End\\\",1712853446049],[\\\"python.json/read list of int\\\",1712872279647],[\\\"cpp.json/$.begin(), $.end()\\\",1713109639079],[\\\"cpp.json/cout <<\\\",1713124467285],[\\\"python.json/read test case 2\\\",1713127428406],[\\\"cpp.json/Template Ultra-Light\\\",1713382341332],[\\\"python.json/return False\\\",1713727893973],[\\\"python.json/read int\\\",1713732530681],[\\\"python.json/read str\\\",1713735426161],[\\\"python.json/print(veredict YES or NO)\\\",1713737651611],[\\\"python.json/comment block\\\",1713818589143],[\\\"cpp.json/Template for codeforces\\\",1713886932388],[\\\"cpp.json/for (int i = 0; i < n; i++)\\\",1713886962277],[\\\"cpp.json/#include <bits/stdc++.h>\\\",1713886971040],[\\\"cpp.json/for (auto $e : array)\\\",1713887009313],[\\\"cpp.json/for (auto $e : container)\\\",1713887137013],[\\\"java.json/Date\\\",1713889574919],[\\\"python.json/template 1 cp\\\",1713908482575],[\\\"python.json/print(normal)\\\",1713908588654],[\\\"python.json/print(f-string)\\\",1713908965592],[\\\"java.json/Template for codeforces\\\",1713982065153],[\\\"java.json/Ultra ligth template\\\",1713982246684],[\\\"java.json/2 Bits() template\\\",1713982274445]]\",\"terminal.integrated.showTerminalConfigPrompt\":\"false\",\"workbench.view.extension.dockerView.state.hidden\":\"[{\\\"id\\\":\\\"dockerContainers\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerImages\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerRegistries\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerNetworks\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"dockerVolumes\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"vscode-docker.views.dockerContexts\\\",\\\"isHidden\\\":false},{\\\"id\\\":\\\"vscode-docker.views.help\\\",\\\"isHidden\\\":false}]\",\"cpp.1.editedCount\":\"5\",\"cpp.1.editedDate\":\"Tue Apr 23 2024\",\"expandSuggestionDocs\":\"true\",\"userDataProfiles.state.hidden\":\"[{\\\"id\\\":\\\"workbench.views.profiles.export.preview\\\",\\\"isHidden\\\":false}]\",\"github-josuerom\":\"[{\\\"id\\\":\\\"vscode.configuration-editing\\\",\\\"name\\\":\\\"Configuration Editing\\\",\\\"allowed\\\":true}]\",\"java.2.editedCount\":\"4\",\"java.2.editedDate\":\"Wed Apr 24 2024\"}}"}
